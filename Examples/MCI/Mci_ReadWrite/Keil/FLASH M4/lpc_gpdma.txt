; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o".\FLASH M4\lpc_gpdma.o" --asm_dir=".\FLASH M4\\" --list_dir=".\FLASH M4\\" --depend=".\FLASH M4\lpc_gpdma.d" --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\Core\CM3\DeviceSupport\NXP\LPC17xx -I..\..\..\..\Drivers\include -I..\..\..\..\BoardSupport -I..\..\..\..\Core\CMSIS\Include -I..\..\..\..\Core\Device\NXP\LPC407x_8x_177x_8x\Include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC407x_8x_177x_8x -D__MICROLIB -DCORE_M4 --omf_browse=".\FLASH M4\lpc_gpdma.crf" ..\..\..\..\Drivers\source\lpc_gpdma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPDMA_Init PROC
;;;194     *********************************************************************/
;;;195    void GPDMA_Init(void)
000000  b510              PUSH     {r4,lr}
;;;196    {
;;;197    	/* Enable GPDMA clock */
;;;198    	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCGPDMA, ENABLE);
000002  2101              MOVS     r1,#1
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;199    
;;;200    	// Reset all channel configuration register
;;;201    	LPC_GPDMACH0->CConfig = 0;
00000a  2000              MOVS     r0,#0
00000c  49d2              LDR      r1,|L1.856|
00000e  6008              STR      r0,[r1,#0]
;;;202    	LPC_GPDMACH1->CConfig = 0;
000010  49d2              LDR      r1,|L1.860|
000012  f8c10130          STR      r0,[r1,#0x130]
;;;203    	LPC_GPDMACH2->CConfig = 0;
000016  49d2              LDR      r1,|L1.864|
000018  6008              STR      r0,[r1,#0]
;;;204    	LPC_GPDMACH3->CConfig = 0;
00001a  49d2              LDR      r1,|L1.868|
00001c  6008              STR      r0,[r1,#0]
;;;205    	LPC_GPDMACH4->CConfig = 0;
00001e  49d2              LDR      r1,|L1.872|
000020  6008              STR      r0,[r1,#0]
;;;206    	LPC_GPDMACH5->CConfig = 0;
000022  49d2              LDR      r1,|L1.876|
000024  6008              STR      r0,[r1,#0]
;;;207    	LPC_GPDMACH6->CConfig = 0;
000026  49d2              LDR      r1,|L1.880|
000028  6008              STR      r0,[r1,#0]
;;;208    	LPC_GPDMACH7->CConfig = 0;
00002a  49d2              LDR      r1,|L1.884|
00002c  6008              STR      r0,[r1,#0]
;;;209    
;;;210    	/* Clear all DMA interrupt and error flag */
;;;211    	LPC_GPDMA->IntTCClear = 0xFF;
00002e  f04f00ff          MOV      r0,#0xff
000032  49ca              LDR      r1,|L1.860|
000034  6088              STR      r0,[r1,#8]
;;;212    	LPC_GPDMA->IntErrClr = 0xFF;
000036  6108              STR      r0,[r1,#0x10]
;;;213    }
000038  bd10              POP      {r4,pc}
;;;214    
                          ENDP

                  GPDMA_Setup PROC
;;;223     *********************************************************************/
;;;224    Status GPDMA_Setup(GPDMA_Channel_CFG_Type *GPDMAChannelConfig)
00003a  b570              PUSH     {r4-r6,lr}
;;;225    {
00003c  4601              MOV      r1,r0
;;;226    	LPC_GPDMACH_TypeDef *pDMAch;
;;;227    	uint32_t tmp1, tmp2;
;;;228    
;;;229    	if (LPC_GPDMA->EnbldChns & (GPDMA_DMACEnbldChns_Ch(GPDMAChannelConfig->ChannelNum))) {
00003e  48c7              LDR      r0,|L1.860|
000040  69c0              LDR      r0,[r0,#0x1c]
000042  2501              MOVS     r5,#1
000044  680e              LDR      r6,[r1,#0]
000046  40b5              LSLS     r5,r5,r6
000048  b2ed              UXTB     r5,r5
00004a  4228              TST      r0,r5
00004c  d001              BEQ      |L1.82|
;;;230    		// This channel is enabled, return ERROR, need to release this channel first
;;;231    		return ERROR;
00004e  2000              MOVS     r0,#0
                  |L1.80|
;;;232    	}
;;;233    
;;;234    	// Get Channel pointer
;;;235    	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[GPDMAChannelConfig->ChannelNum];
;;;236    
;;;237    	// Reset the Interrupt status
;;;238    	LPC_GPDMA->IntTCClear = GPDMA_DMACIntTCClear_Ch(GPDMAChannelConfig->ChannelNum);
;;;239    	LPC_GPDMA->IntErrClr = GPDMA_DMACIntErrClr_Ch(GPDMAChannelConfig->ChannelNum);
;;;240    
;;;241    	// Clear DMA configure
;;;242    	pDMAch->CControl = 0x00;
;;;243    	pDMAch->CConfig = 0x00;
;;;244    
;;;245    	/* Assign Linker List Item value */
;;;246    	pDMAch->CLLI = GPDMAChannelConfig->DMALLI;
;;;247    
;;;248    	/* Set value to Channel Control Registers */
;;;249    	switch (GPDMAChannelConfig->TransferType)
;;;250    	{
;;;251    	// Memory to memory
;;;252    	case GPDMA_TRANSFERTYPE_M2M:
;;;253    		// Assign physical source and destination address
;;;254    		pDMAch->CSrcAddr = GPDMAChannelConfig->SrcMemAddr;
;;;255    		pDMAch->CDestAddr = GPDMAChannelConfig->DstMemAddr;
;;;256    		pDMAch->CControl
;;;257    				= GPDMA_DMACCxControl_TransferSize(GPDMAChannelConfig->TransferSize) \
;;;258    						| GPDMA_DMACCxControl_SBSize(GPDMA_BSIZE_32) \
;;;259    						| GPDMA_DMACCxControl_DBSize(GPDMA_BSIZE_32) \
;;;260    						| GPDMA_DMACCxControl_SWidth(GPDMAChannelConfig->TransferWidth) \
;;;261    						| GPDMA_DMACCxControl_DWidth(GPDMAChannelConfig->TransferWidth) \
;;;262    						| GPDMA_DMACCxControl_SI \
;;;263    						| GPDMA_DMACCxControl_DI \
;;;264    						| GPDMA_DMACCxControl_I;
;;;265    		break;
;;;266    	// Memory to peripheral
;;;267    	case GPDMA_TRANSFERTYPE_M2P:
;;;268    	case GPDMA_TRANSFERTYPE_M2P_DEST_CTRL:
;;;269    		// Assign physical source
;;;270    		pDMAch->CSrcAddr = GPDMAChannelConfig->SrcMemAddr;
;;;271    		// Assign peripheral destination address
;;;272    		pDMAch->CDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
;;;273    		pDMAch->CControl
;;;274    				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
;;;275    						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
;;;276    						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
;;;277    						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
;;;278    						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
;;;279    						| GPDMA_DMACCxControl_SI \
;;;280    						| GPDMA_DMACCxControl_I;
;;;281    		break;
;;;282    	// Peripheral to memory
;;;283    	case GPDMA_TRANSFERTYPE_P2M:
;;;284    	case GPDMA_TRANSFERTYPE_P2M_SRC_CTRL:
;;;285    		// Assign peripheral source address
;;;286    		pDMAch->CSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
;;;287    		// Assign memory destination address
;;;288    		pDMAch->CDestAddr = GPDMAChannelConfig->DstMemAddr;
;;;289    		pDMAch->CControl
;;;290    				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
;;;291    						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
;;;292    						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
;;;293    						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
;;;294    						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
;;;295    						| GPDMA_DMACCxControl_DI \
;;;296    						| GPDMA_DMACCxControl_I;
;;;297    		break;
;;;298    	// Peripheral to peripheral
;;;299    	case GPDMA_TRANSFERTYPE_P2P:
;;;300    		// Assign peripheral source address
;;;301    		pDMAch->CSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
;;;302    		// Assign peripheral destination address
;;;303    		pDMAch->CDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
;;;304    		pDMAch->CControl = GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
;;;305    						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
;;;306    						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
;;;307    						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
;;;308    						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
;;;309    						| GPDMA_DMACCxControl_I;
;;;310    		break;
;;;311    	// Do not support any more transfer type, return ERROR
;;;312    	default:
;;;313    		return ERROR;
;;;314    	}
;;;315    
;;;316    	/* Re-Configure DMA Request Select for source peripheral */
;;;317    	if((GPDMAChannelConfig->SrcConn != 8)&&(GPDMAChannelConfig->SrcConn != 9))
;;;318    	{
;;;319    		if (GPDMAChannelConfig->SrcConn > 15)
;;;320    		{
;;;321    			LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->SrcConn - 16));
;;;322    		} else {
;;;323    			LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->SrcConn));
;;;324    		}
;;;325    	}
;;;326    
;;;327    	/* Re-Configure DMA Request Select for Destination peripheral */
;;;328    	if((GPDMAChannelConfig->DstConn != 8)&&(GPDMAChannelConfig->DstConn != 9))
;;;329    	{
;;;330    		if (GPDMAChannelConfig->DstConn > 15)
;;;331    		{
;;;332    			LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->DstConn - 16));
;;;333    		} else {
;;;334    			LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->DstConn));
;;;335    		}
;;;336    	}
;;;337    
;;;338    	/* Enable DMA channels, little endian */
;;;339    	LPC_GPDMA->Config = GPDMA_DMACConfig_E;
;;;340    	while (!(LPC_GPDMA->Config & GPDMA_DMACConfig_E));
;;;341    
;;;342    	// Calculate absolute value for Connection number
;;;343    	tmp1 = GPDMAChannelConfig->SrcConn;
;;;344    	tmp1 = ((tmp1 > 15) ? (tmp1 - 16) : tmp1);
;;;345    	tmp2 = GPDMAChannelConfig->DstConn;
;;;346    	tmp2 = ((tmp2 > 15) ? (tmp2 - 16) : tmp2);
;;;347    
;;;348    	// Configure DMA Channel, enable Error Counter and Terminate counter
;;;349    	pDMAch->CConfig = GPDMA_DMACCxConfig_IE | GPDMA_DMACCxConfig_ITC /*| GPDMA_DMACCxConfig_E*/ \
;;;350    		| GPDMA_DMACCxConfig_TransferType((uint32_t)GPDMAChannelConfig->TransferType) \
;;;351    		| GPDMA_DMACCxConfig_SrcPeripheral(tmp1) \
;;;352    		| GPDMA_DMACCxConfig_DestPeripheral(tmp2);
;;;353    
;;;354    	return SUCCESS;
;;;355    }
000050  bd70              POP      {r4-r6,pc}
                  |L1.82|
000052  4dc9              LDR      r5,|L1.888|
000054  6808              LDR      r0,[r1,#0]            ;235
000056  f8552020          LDR      r2,[r5,r0,LSL #2]     ;235
00005a  2001              MOVS     r0,#1                 ;238
00005c  680d              LDR      r5,[r1,#0]            ;238
00005e  40a8              LSLS     r0,r0,r5              ;238
000060  b2c0              UXTB     r0,r0                 ;238
000062  4dbe              LDR      r5,|L1.860|
000064  60a8              STR      r0,[r5,#8]            ;238
000066  2001              MOVS     r0,#1                 ;239
000068  680d              LDR      r5,[r1,#0]            ;239
00006a  40a8              LSLS     r0,r0,r5              ;239
00006c  b2c0              UXTB     r0,r0                 ;239
00006e  4dbb              LDR      r5,|L1.860|
000070  6128              STR      r0,[r5,#0x10]         ;239
000072  2000              MOVS     r0,#0                 ;242
000074  60d0              STR      r0,[r2,#0xc]          ;242
000076  6110              STR      r0,[r2,#0x10]         ;243
000078  6a08              LDR      r0,[r1,#0x20]         ;246
00007a  6090              STR      r0,[r2,#8]            ;246
00007c  6948              LDR      r0,[r1,#0x14]         ;249
00007e  2807              CMP      r0,#7                 ;249
000080  d27e              BCS      |L1.384|
000082  e8dff000          TBB      [pc,r0]               ;249
000086  041b              DCB      0x04,0x1b
000088  436b961c          DCB      0x43,0x6b,0x96,0x1c
00008c  4400              DCB      0x44,0x00
00008e  68c8              LDR      r0,[r1,#0xc]          ;254
000090  6010              STR      r0,[r2,#0]            ;254
000092  6908              LDR      r0,[r1,#0x10]         ;255
000094  6050              STR      r0,[r2,#4]            ;255
000096  6848              LDR      r0,[r1,#4]            ;256
000098  f3c0000b          UBFX     r0,r0,#0,#12          ;256
00009c  f4403010          ORR      r0,r0,#0x24000        ;256
0000a0  688d              LDR      r5,[r1,#8]            ;256
0000a2  f0050507          AND      r5,r5,#7              ;256
0000a6  ea404085          ORR      r0,r0,r5,LSL #18      ;256
0000aa  688d              LDR      r5,[r1,#8]            ;256
0000ac  f0050507          AND      r5,r5,#7              ;256
0000b0  ea405045          ORR      r0,r0,r5,LSL #21      ;256
0000b4  f040400c          ORR      r0,r0,#0x8c000000     ;256
0000b8  60d0              STR      r0,[r2,#0xc]          ;256
0000ba  e07c              B        |L1.438|
0000bc  bf00              NOP                            ;268
0000be  68c8              LDR      r0,[r1,#0xc]          ;270
0000c0  6010              STR      r0,[r2,#0]            ;270
0000c2  4dae              LDR      r5,|L1.892|
0000c4  69c8              LDR      r0,[r1,#0x1c]         ;272
0000c6  f8550020          LDR      r0,[r5,r0,LSL #2]     ;272
0000ca  6050              STR      r0,[r2,#4]            ;272
0000cc  4dac              LDR      r5,|L1.896|
0000ce  69c8              LDR      r0,[r1,#0x1c]         ;273
0000d0  5c28              LDRB     r0,[r5,r0]            ;273
0000d2  f0000507          AND      r5,r0,#7              ;273
0000d6  6848              LDR      r0,[r1,#4]            ;273
0000d8  f365301f          BFI      r0,r5,#12,#20         ;273
0000dc  4ea8              LDR      r6,|L1.896|
0000de  69cd              LDR      r5,[r1,#0x1c]         ;273
0000e0  5d75              LDRB     r5,[r6,r5]            ;273
0000e2  f0050507          AND      r5,r5,#7              ;273
0000e6  ea4030c5          ORR      r0,r0,r5,LSL #15      ;273
0000ea  4ea6              LDR      r6,|L1.900|
0000ec  69cd              LDR      r5,[r1,#0x1c]         ;273
0000ee  5d75              LDRB     r5,[r6,r5]            ;273
0000f0  f0050507          AND      r5,r5,#7              ;273
0000f4  ea404085          ORR      r0,r0,r5,LSL #18      ;273
0000f8  69cd              LDR      r5,[r1,#0x1c]         ;273
0000fa  5d75              LDRB     r5,[r6,r5]            ;273
0000fc  f0050507          AND      r5,r5,#7              ;273
000100  ea405045          ORR      r0,r0,r5,LSL #21      ;273
000104  f0404004          ORR      r0,r0,#0x84000000     ;273
000108  60d0              STR      r0,[r2,#0xc]          ;273
00010a  e054              B        |L1.438|
00010c  bf00              NOP                            ;284
00010e  4d9b              LDR      r5,|L1.892|
000110  6988              LDR      r0,[r1,#0x18]         ;286
000112  f8550020          LDR      r0,[r5,r0,LSL #2]     ;286
000116  6010              STR      r0,[r2,#0]            ;286
000118  6908              LDR      r0,[r1,#0x10]         ;288
00011a  6050              STR      r0,[r2,#4]            ;288
00011c  4d98              LDR      r5,|L1.896|
00011e  6988              LDR      r0,[r1,#0x18]         ;289
000120  5c28              LDRB     r0,[r5,r0]            ;289
000122  f0000507          AND      r5,r0,#7              ;289
000126  6848              LDR      r0,[r1,#4]            ;289
000128  f365301f          BFI      r0,r5,#12,#20         ;289
00012c  4e94              LDR      r6,|L1.896|
00012e  698d              LDR      r5,[r1,#0x18]         ;289
000130  5d75              LDRB     r5,[r6,r5]            ;289
000132  f0050507          AND      r5,r5,#7              ;289
000136  ea4030c5          ORR      r0,r0,r5,LSL #15      ;289
00013a  4e92              LDR      r6,|L1.900|
00013c  698d              LDR      r5,[r1,#0x18]         ;289
00013e  5d75              LDRB     r5,[r6,r5]            ;289
000140  f0050507          AND      r5,r5,#7              ;289
000144  ea404085          ORR      r0,r0,r5,LSL #18      ;289
000148  698d              LDR      r5,[r1,#0x18]         ;289
00014a  5d75              LDRB     r5,[r6,r5]            ;289
00014c  f0050507          AND      r5,r5,#7              ;289
000150  ea405045          ORR      r0,r0,r5,LSL #21      ;289
000154  f0404008          ORR      r0,r0,#0x88000000     ;289
000158  60d0              STR      r0,[r2,#0xc]          ;289
00015a  e02c              B        |L1.438|
00015c  4d87              LDR      r5,|L1.892|
00015e  6988              LDR      r0,[r1,#0x18]         ;301
000160  f8550020          LDR      r0,[r5,r0,LSL #2]     ;301
000164  6010              STR      r0,[r2,#0]            ;301
000166  69c8              LDR      r0,[r1,#0x1c]         ;303
000168  f8550020          LDR      r0,[r5,r0,LSL #2]     ;303
00016c  6050              STR      r0,[r2,#4]            ;303
00016e  4d84              LDR      r5,|L1.896|
000170  6988              LDR      r0,[r1,#0x18]         ;304
000172  5c28              LDRB     r0,[r5,r0]            ;304
000174  f0000507          AND      r5,r0,#7              ;304
000178  6848              LDR      r0,[r1,#4]            ;304
00017a  f365301f          BFI      r0,r5,#12,#20         ;304
00017e  e000              B        |L1.386|
                  |L1.384|
000180  e017              B        |L1.434|
                  |L1.386|
000182  4e7f              LDR      r6,|L1.896|
000184  69cd              LDR      r5,[r1,#0x1c]         ;304
000186  5d75              LDRB     r5,[r6,r5]            ;304
000188  f0050507          AND      r5,r5,#7              ;304
00018c  ea4030c5          ORR      r0,r0,r5,LSL #15      ;304
000190  4e7c              LDR      r6,|L1.900|
000192  698d              LDR      r5,[r1,#0x18]         ;304
000194  5d75              LDRB     r5,[r6,r5]            ;304
000196  f0050507          AND      r5,r5,#7              ;304
00019a  ea404085          ORR      r0,r0,r5,LSL #18      ;304
00019e  69cd              LDR      r5,[r1,#0x1c]         ;304
0001a0  5d75              LDRB     r5,[r6,r5]            ;304
0001a2  f0050507          AND      r5,r5,#7              ;304
0001a6  ea405045          ORR      r0,r0,r5,LSL #21      ;304
0001aa  f0404000          ORR      r0,r0,#0x80000000     ;304
0001ae  60d0              STR      r0,[r2,#0xc]          ;304
0001b0  e001              B        |L1.438|
                  |L1.434|
0001b2  2000              MOVS     r0,#0                 ;313
0001b4  e74c              B        |L1.80|
                  |L1.438|
0001b6  bf00              NOP                            ;265
0001b8  6988              LDR      r0,[r1,#0x18]         ;317
0001ba  2808              CMP      r0,#8                 ;317
0001bc  d01b              BEQ      |L1.502|
0001be  6988              LDR      r0,[r1,#0x18]         ;317
0001c0  2809              CMP      r0,#9                 ;317
0001c2  d018              BEQ      |L1.502|
0001c4  6988              LDR      r0,[r1,#0x18]         ;319
0001c6  280f              CMP      r0,#0xf               ;319
0001c8  d90b              BLS      |L1.482|
0001ca  486f              LDR      r0,|L1.904|
0001cc  f8d001c4          LDR      r0,[r0,#0x1c4]        ;321
0001d0  698d              LDR      r5,[r1,#0x18]         ;321
0001d2  3d10              SUBS     r5,r5,#0x10           ;321
0001d4  2601              MOVS     r6,#1                 ;321
0001d6  40ae              LSLS     r6,r6,r5              ;321
0001d8  4330              ORRS     r0,r0,r6              ;321
0001da  4d6b              LDR      r5,|L1.904|
0001dc  f8c501c4          STR      r0,[r5,#0x1c4]        ;321
0001e0  e009              B        |L1.502|
                  |L1.482|
0001e2  4869              LDR      r0,|L1.904|
0001e4  f8d001c4          LDR      r0,[r0,#0x1c4]        ;323
0001e8  2501              MOVS     r5,#1                 ;323
0001ea  698e              LDR      r6,[r1,#0x18]         ;323
0001ec  40b5              LSLS     r5,r5,r6              ;323
0001ee  43a8              BICS     r0,r0,r5              ;323
0001f0  4d65              LDR      r5,|L1.904|
0001f2  f8c501c4          STR      r0,[r5,#0x1c4]        ;323
                  |L1.502|
0001f6  69c8              LDR      r0,[r1,#0x1c]         ;328
0001f8  2808              CMP      r0,#8                 ;328
0001fa  d01b              BEQ      |L1.564|
0001fc  69c8              LDR      r0,[r1,#0x1c]         ;328
0001fe  2809              CMP      r0,#9                 ;328
000200  d018              BEQ      |L1.564|
000202  69c8              LDR      r0,[r1,#0x1c]         ;330
000204  280f              CMP      r0,#0xf               ;330
000206  d90b              BLS      |L1.544|
000208  485f              LDR      r0,|L1.904|
00020a  f8d001c4          LDR      r0,[r0,#0x1c4]        ;332
00020e  69cd              LDR      r5,[r1,#0x1c]         ;332
000210  3d10              SUBS     r5,r5,#0x10           ;332
000212  2601              MOVS     r6,#1                 ;332
000214  40ae              LSLS     r6,r6,r5              ;332
000216  4330              ORRS     r0,r0,r6              ;332
000218  4d5b              LDR      r5,|L1.904|
00021a  f8c501c4          STR      r0,[r5,#0x1c4]        ;332
00021e  e009              B        |L1.564|
                  |L1.544|
000220  4859              LDR      r0,|L1.904|
000222  f8d001c4          LDR      r0,[r0,#0x1c4]        ;334
000226  2501              MOVS     r5,#1                 ;334
000228  69ce              LDR      r6,[r1,#0x1c]         ;334
00022a  40b5              LSLS     r5,r5,r6              ;334
00022c  43a8              BICS     r0,r0,r5              ;334
00022e  4d56              LDR      r5,|L1.904|
000230  f8c501c4          STR      r0,[r5,#0x1c4]        ;334
                  |L1.564|
000234  2001              MOVS     r0,#1                 ;339
000236  4d49              LDR      r5,|L1.860|
000238  6328              STR      r0,[r5,#0x30]         ;339
00023a  bf00              NOP                            ;340
                  |L1.572|
00023c  4847              LDR      r0,|L1.860|
00023e  6b00              LDR      r0,[r0,#0x30]         ;340
000240  f0100f01          TST      r0,#1                 ;340
000244  d0fa              BEQ      |L1.572|
000246  698b              LDR      r3,[r1,#0x18]         ;343
000248  2b0f              CMP      r3,#0xf               ;344
00024a  d902              BLS      |L1.594|
00024c  f1a30010          SUB      r0,r3,#0x10           ;344
000250  e000              B        |L1.596|
                  |L1.594|
000252  4618              MOV      r0,r3                 ;344
                  |L1.596|
000254  4603              MOV      r3,r0                 ;344
000256  69cc              LDR      r4,[r1,#0x1c]         ;345
000258  2c0f              CMP      r4,#0xf               ;346
00025a  d902              BLS      |L1.610|
00025c  f1a40010          SUB      r0,r4,#0x10           ;346
000260  e000              B        |L1.612|
                  |L1.610|
000262  4620              MOV      r0,r4                 ;346
                  |L1.612|
000264  4604              MOV      r4,r0                 ;346
000266  6948              LDR      r0,[r1,#0x14]         ;349
000268  f0000007          AND      r0,r0,#7              ;349
00026c  f44f4540          MOV      r5,#0xc000            ;349
000270  ea4520c0          ORR      r0,r5,r0,LSL #11      ;349
000274  f003051f          AND      r5,r3,#0x1f           ;349
000278  ea400045          ORR      r0,r0,r5,LSL #1       ;349
00027c  f004051f          AND      r5,r4,#0x1f           ;349
000280  ea401085          ORR      r0,r0,r5,LSL #6       ;349
000284  6110              STR      r0,[r2,#0x10]         ;349
000286  2001              MOVS     r0,#1                 ;354
000288  e6e2              B        |L1.80|
;;;356    
                          ENDP

                  GPDMA_ChannelCmd PROC
;;;365     **********************************************************************/
;;;366    void GPDMA_ChannelCmd(uint8_t channelNum, FunctionalState NewState)
00028a  4602              MOV      r2,r0
;;;367    {
;;;368    	LPC_GPDMACH_TypeDef *pDMAch;
;;;369    
;;;370    	// Get Channel pointer
;;;371    	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[channelNum];
00028c  4b3a              LDR      r3,|L1.888|
00028e  f8530022          LDR      r0,[r3,r2,LSL #2]
;;;372    
;;;373    	if (NewState == ENABLE) {
000292  2901              CMP      r1,#1
000294  d104              BNE      |L1.672|
;;;374    		pDMAch->CConfig |= GPDMA_DMACCxConfig_E;
000296  6903              LDR      r3,[r0,#0x10]
000298  f0430301          ORR      r3,r3,#1
00029c  6103              STR      r3,[r0,#0x10]
00029e  e003              B        |L1.680|
                  |L1.672|
;;;375    	} else {
;;;376    		pDMAch->CConfig &= ~GPDMA_DMACCxConfig_E;
0002a0  6903              LDR      r3,[r0,#0x10]
0002a2  f0230301          BIC      r3,r3,#1
0002a6  6103              STR      r3,[r0,#0x10]
                  |L1.680|
;;;377    	}
;;;378    }
0002a8  4770              BX       lr
;;;379    /*********************************************************************//**
                          ENDP

                  GPDMA_IntGetStatus PROC
;;;394     **********************************************************************/
;;;395    IntStatus GPDMA_IntGetStatus(GPDMA_Status_Type type, uint8_t channel)
0002aa  4602              MOV      r2,r0
;;;396    {
;;;397    	switch (type)
0002ac  2a05              CMP      r2,#5
0002ae  d23b              BCS      |L1.808|
0002b0  e8dff002          TBB      [pc,r2]
0002b4  030e1924          DCB      0x03,0x0e,0x19,0x24
0002b8  2f00              DCB      0x2f,0x00
;;;398    	{
;;;399    	case GPDMA_STAT_INT: //check status of DMA channel interrupts
;;;400    		if (LPC_GPDMA->IntStat & (GPDMA_DMACIntStat_Ch(channel)))
0002ba  4828              LDR      r0,|L1.860|
0002bc  6800              LDR      r0,[r0,#0]
0002be  2301              MOVS     r3,#1
0002c0  408b              LSLS     r3,r3,r1
0002c2  b2db              UXTB     r3,r3
0002c4  4218              TST      r0,r3
0002c6  d001              BEQ      |L1.716|
;;;401    			return SET;
0002c8  2001              MOVS     r0,#1
                  |L1.714|
;;;402    		return RESET;
;;;403    	case GPDMA_STAT_INTTC: // check terminal count interrupt request status for DMA
;;;404    		if (LPC_GPDMA->IntTCStat & GPDMA_DMACIntTCStat_Ch(channel))
;;;405    			return SET;
;;;406    		return RESET;
;;;407    	case GPDMA_STAT_INTERR: //check interrupt status for DMA channels
;;;408    		if (LPC_GPDMA->IntErrStat & GPDMA_DMACIntTCClear_Ch(channel))
;;;409    			return SET;
;;;410    		return RESET;
;;;411    	case GPDMA_STAT_RAWINTTC: //check status of the terminal count interrupt for DMA channels
;;;412    		if (LPC_GPDMA->RawIntErrStat & GPDMA_DMACRawIntTCStat_Ch(channel))
;;;413    			return SET;
;;;414    		return RESET;
;;;415    	case GPDMA_STAT_RAWINTERR: //check status of the error interrupt for DMA channels
;;;416    		if (LPC_GPDMA->RawIntTCStat & GPDMA_DMACRawIntErrStat_Ch(channel))
;;;417    			return SET;
;;;418    		return RESET;
;;;419    	default: //check enable status for DMA channels
;;;420    		if (LPC_GPDMA->EnbldChns & GPDMA_DMACEnbldChns_Ch(channel))
;;;421    			return SET;
;;;422    		return RESET;
;;;423    	}
;;;424    }
0002ca  4770              BX       lr
                  |L1.716|
0002cc  2000              MOVS     r0,#0                 ;402
0002ce  e7fc              B        |L1.714|
0002d0  4822              LDR      r0,|L1.860|
0002d2  6843              LDR      r3,[r0,#4]            ;404
0002d4  2001              MOVS     r0,#1                 ;404
0002d6  4088              LSLS     r0,r0,r1              ;404
0002d8  b2c0              UXTB     r0,r0                 ;404
0002da  4203              TST      r3,r0                 ;404
0002dc  d001              BEQ      |L1.738|
0002de  2001              MOVS     r0,#1                 ;405
0002e0  e7f3              B        |L1.714|
                  |L1.738|
0002e2  2000              MOVS     r0,#0                 ;406
0002e4  e7f1              B        |L1.714|
0002e6  481d              LDR      r0,|L1.860|
0002e8  68c0              LDR      r0,[r0,#0xc]          ;408
0002ea  2301              MOVS     r3,#1                 ;408
0002ec  408b              LSLS     r3,r3,r1              ;408
0002ee  b2db              UXTB     r3,r3                 ;408
0002f0  4218              TST      r0,r3                 ;408
0002f2  d001              BEQ      |L1.760|
0002f4  2001              MOVS     r0,#1                 ;409
0002f6  e7e8              B        |L1.714|
                  |L1.760|
0002f8  2000              MOVS     r0,#0                 ;410
0002fa  e7e6              B        |L1.714|
0002fc  4817              LDR      r0,|L1.860|
0002fe  6983              LDR      r3,[r0,#0x18]         ;412
000300  2001              MOVS     r0,#1                 ;412
000302  4088              LSLS     r0,r0,r1              ;412
000304  b2c0              UXTB     r0,r0                 ;412
000306  4203              TST      r3,r0                 ;412
000308  d001              BEQ      |L1.782|
00030a  2001              MOVS     r0,#1                 ;413
00030c  e7dd              B        |L1.714|
                  |L1.782|
00030e  2000              MOVS     r0,#0                 ;414
000310  e7db              B        |L1.714|
000312  4812              LDR      r0,|L1.860|
000314  6940              LDR      r0,[r0,#0x14]         ;416
000316  2301              MOVS     r3,#1                 ;416
000318  408b              LSLS     r3,r3,r1              ;416
00031a  b2db              UXTB     r3,r3                 ;416
00031c  4218              TST      r0,r3                 ;416
00031e  d001              BEQ      |L1.804|
000320  2001              MOVS     r0,#1                 ;417
000322  e7d2              B        |L1.714|
                  |L1.804|
000324  2000              MOVS     r0,#0                 ;418
000326  e7d0              B        |L1.714|
                  |L1.808|
000328  480c              LDR      r0,|L1.860|
00032a  69c3              LDR      r3,[r0,#0x1c]         ;420
00032c  2001              MOVS     r0,#1                 ;420
00032e  4088              LSLS     r0,r0,r1              ;420
000330  b2c0              UXTB     r0,r0                 ;420
000332  4203              TST      r3,r0                 ;420
000334  d001              BEQ      |L1.826|
000336  2001              MOVS     r0,#1                 ;421
000338  e7c7              B        |L1.714|
                  |L1.826|
00033a  2000              MOVS     r0,#0                 ;422
00033c  e7c5              B        |L1.714|
;;;425    
                          ENDP

                  GPDMA_ClearIntPending PROC
;;;433     **********************************************************************/
;;;434    void GPDMA_ClearIntPending(GPDMA_StateClear_Type type, uint8_t channel)
00033e  b928              CBNZ     r0,|L1.844|
;;;435    {
;;;436    	if (type == GPDMA_STATCLR_INTTC) // clears the terminal count interrupt request on DMA channel
;;;437    		LPC_GPDMA->IntTCClear = GPDMA_DMACIntTCClear_Ch(channel);
000340  2201              MOVS     r2,#1
000342  408a              LSLS     r2,r2,r1
000344  b2d2              UXTB     r2,r2
000346  4b05              LDR      r3,|L1.860|
000348  609a              STR      r2,[r3,#8]
00034a  e004              B        |L1.854|
                  |L1.844|
;;;438    	else // clear the error interrupt request
;;;439    		LPC_GPDMA->IntErrClr = GPDMA_DMACIntErrClr_Ch(channel);
00034c  2201              MOVS     r2,#1
00034e  408a              LSLS     r2,r2,r1
000350  b2d2              UXTB     r2,r2
000352  4b02              LDR      r3,|L1.860|
000354  611a              STR      r2,[r3,#0x10]
                  |L1.854|
;;;440    }
000356  4770              BX       lr
;;;441    
                          ENDP

                  |L1.856|
                          DCD      0x20080110
                  |L1.860|
                          DCD      0x20080000
                  |L1.864|
                          DCD      0x20080150
                  |L1.868|
                          DCD      0x20080170
                  |L1.872|
                          DCD      0x20080190
                  |L1.876|
                          DCD      0x200801b0
                  |L1.880|
                          DCD      0x200801d0
                  |L1.884|
                          DCD      0x200801f0
                  |L1.888|
                          DCD      pGPDMACh
                  |L1.892|
                          DCD      GPDMA_LUTPerAddr
                  |L1.896|
                          DCD      GPDMA_LUTPerBurst
                  |L1.900|
                          DCD      GPDMA_LUTPerWid
                  |L1.904|
                          DCD      0x400fc000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  GPDMA_LUTPerBurst
000000  00020101          DCB      0x00,0x02,0x01,0x01
000004  01010101          DCB      0x01,0x01,0x01,0x01
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00000404          DCB      0x00,0x00,0x04,0x04
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  GPDMA_LUTPerWid
000020  00020000          DCB      0x00,0x02,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  02000000          DCB      0x02,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  02020202          DCB      0x02,0x02,0x02,0x02
000034  02020202          DCB      0x02,0x02,0x02,0x02
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000202          DCB      0x00,0x00,0x02,0x02

                          AREA ||.data||, DATA, ALIGN=2

                  GPDMA_LUTPerAddr
                          DCD      0x00000000
                          DCD      0x400c0080
                          DCD      0x40088008
                          DCD      0x40088008
                          DCD      0x40030008
                          DCD      0x40030008
                          DCD      0x400ac008
                          DCD      0x400ac008
                          DCD      0x40034004
                          DCD      0x4008c000
                          DCD      0x4000c000
                          DCD      0x4000c000
                          DCD      0x40010000
                          DCD      0x40010000
                          DCD      0x40098000
                          DCD      0x40098000
                          DCD      0x40004018
                          DCD      0x4000401c
                          DCD      0x40008018
                          DCD      0x4000801c
                          DCD      0x40090018
                          DCD      0x4009001c
                          DCD      0x400a8008
                          DCD      0x400a800c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x4009c000
                          DCD      0x4009c000
                          DCD      0x400a4000
                          DCD      0x400a4000
                          DCD      0x40094018
                          DCD      0x4009401c
                  pGPDMACh
                          DCD      0x20080100
                          DCD      0x20080120
                          DCD      0x20080140
                          DCD      0x20080160
                          DCD      0x20080180
                          DCD      0x200801a0
                          DCD      0x200801c0
                          DCD      0x200801e0

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\source\\lpc_gpdma.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_lpc_gpdma_c_15acc267____REV16|
#line 115 "..\\..\\..\\..\\Core\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_lpc_gpdma_c_15acc267____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_lpc_gpdma_c_15acc267____REVSH|
#line 129
|__asm___11_lpc_gpdma_c_15acc267____REVSH| PROC
#line 130

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
