; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o".\FLASH M4\lpc_clkpwr.o" --asm_dir=".\FLASH M4\\" --list_dir=".\FLASH M4\\" --depend=".\FLASH M4\lpc_clkpwr.d" --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\Core\CM3\DeviceSupport\NXP\LPC17xx -I..\..\..\..\Drivers\include -I..\..\..\..\BoardSupport -I..\..\..\..\Core\CMSIS\Include -I..\..\..\..\Core\Device\NXP\LPC407x_8x_177x_8x\Include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC407x_8x_177x_8x -D__MICROLIB -DCORE_M4 --omf_browse=".\FLASH M4\lpc_clkpwr.crf" ..\..\..\..\Drivers\source\lpc_clkpwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CLKPWR_SetCLKDiv PROC
;;;75      **********************************************************************/
;;;76     void CLKPWR_SetCLKDiv (uint8_t ClkType, uint8_t DivVal)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;78     	uint32_t tmp;
;;;79     	switch(ClkType)
000006  b136              CBZ      r6,|L1.22|
000008  2e01              CMP      r6,#1
00000a  d012              BEQ      |L1.50|
00000c  2e02              CMP      r6,#2
00000e  d01e              BEQ      |L1.78|
000010  2e03              CMP      r6,#3
000012  d13e              BNE      |L1.146|
000014  e029              B        |L1.106|
                  |L1.22|
;;;80     	{
;;;81     	case CLKPWR_CLKTYPE_CPU:
;;;82     		tmp = 	LPC_SC->CCLKSEL & ~(0x1F);
000016  4844              LDR      r0,|L1.296|
000018  6800              LDR      r0,[r0,#0]
00001a  f020041f          BIC      r4,r0,#0x1f
;;;83     		tmp |=  DivVal & 0x1F;
00001e  f005001f          AND      r0,r5,#0x1f
000022  ea400404          ORR      r4,r0,r4
;;;84     		LPC_SC->CCLKSEL = tmp;
000026  4841              LDR      r0,|L1.300|
000028  f8c04104          STR      r4,[r0,#0x104]
;;;85     		SystemCoreClockUpdate(); //Update clock
00002c  f7fffffe          BL       SystemCoreClockUpdate
;;;86     		break;
000030  e031              B        |L1.150|
                  |L1.50|
;;;87     	case CLKPWR_CLKTYPE_PER:
;;;88     		tmp = 	LPC_SC->PCLKSEL & ~(0x1F);
000032  483f              LDR      r0,|L1.304|
000034  6800              LDR      r0,[r0,#0]
000036  f020041f          BIC      r4,r0,#0x1f
;;;89     		tmp |=  DivVal & 0x1F;
00003a  f005001f          AND      r0,r5,#0x1f
00003e  ea400404          ORR      r4,r0,r4
;;;90     		LPC_SC->PCLKSEL = tmp;
000042  483a              LDR      r0,|L1.300|
000044  f8c041a8          STR      r4,[r0,#0x1a8]
;;;91     		SystemCoreClockUpdate(); //Update clock
000048  f7fffffe          BL       SystemCoreClockUpdate
;;;92     		break;
00004c  e023              B        |L1.150|
                  |L1.78|
;;;93     	case CLKPWR_CLKTYPE_EMC:
;;;94     		tmp = 	LPC_SC->EMCCLKSEL & ~(0x01);
00004e  4839              LDR      r0,|L1.308|
000050  6800              LDR      r0,[r0,#0]
000052  f0200401          BIC      r4,r0,#1
;;;95     		tmp |=  DivVal & 0x01;
000056  f0050001          AND      r0,r5,#1
00005a  ea400404          ORR      r4,r0,r4
;;;96     		LPC_SC->EMCCLKSEL = tmp;
00005e  4833              LDR      r0,|L1.300|
000060  f8c04100          STR      r4,[r0,#0x100]
;;;97     		SystemCoreClockUpdate(); //Update clock
000064  f7fffffe          BL       SystemCoreClockUpdate
;;;98     		break;
000068  e015              B        |L1.150|
                  |L1.106|
;;;99     	case CLKPWR_CLKTYPE_USB:
;;;100    		tmp = 	LPC_SC->USBCLKSEL & ~(0x1F);
00006a  4833              LDR      r0,|L1.312|
00006c  6800              LDR      r0,[r0,#0]
00006e  f020041f          BIC      r4,r0,#0x1f
;;;101    		tmp |=  DivVal & 0x1F;
000072  f005001f          AND      r0,r5,#0x1f
000076  ea400404          ORR      r4,r0,r4
;;;102    		LPC_SC->USBCLKSEL |= DivVal & 0x1F;
00007a  482c              LDR      r0,|L1.300|
00007c  f8d00108          LDR      r0,[r0,#0x108]
000080  f005011f          AND      r1,r5,#0x1f
000084  ea400001          ORR      r0,r0,r1
000088  492b              LDR      r1,|L1.312|
00008a  6008              STR      r0,[r1,#0]
;;;103    		SystemCoreClockUpdate(); //Update clock
00008c  f7fffffe          BL       SystemCoreClockUpdate
;;;104    		break;
000090  e001              B        |L1.150|
                  |L1.146|
;;;105    	default:
;;;106    		while(1);//Error Loop;
000092  bf00              NOP      
                  |L1.148|
000094  e7fe              B        |L1.148|
                  |L1.150|
000096  bf00              NOP                            ;86
;;;107    	}
;;;108    }
000098  bd70              POP      {r4-r6,pc}
;;;109    
                          ENDP

                  CLKPWR_GetCLK PROC
;;;117     **********************************************************************/
;;;118    uint32_t CLKPWR_GetCLK (uint8_t ClkType)
00009a  4601              MOV      r1,r0
;;;119    {
;;;120    	switch(ClkType)
00009c  b131              CBZ      r1,|L1.172|
00009e  2901              CMP      r1,#1
0000a0  d007              BEQ      |L1.178|
0000a2  2902              CMP      r1,#2
0000a4  d008              BEQ      |L1.184|
0000a6  2903              CMP      r1,#3
0000a8  d10c              BNE      |L1.196|
0000aa  e008              B        |L1.190|
                  |L1.172|
;;;121    	{
;;;122    		case CLKPWR_CLKTYPE_CPU:
;;;123    			return SystemCoreClock;
0000ac  4823              LDR      r0,|L1.316|
0000ae  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
                  |L1.176|
;;;124    
;;;125    		case CLKPWR_CLKTYPE_PER:
;;;126    			return PeripheralClock;
;;;127    
;;;128    		case CLKPWR_CLKTYPE_EMC:
;;;129    			return EMCClock;
;;;130    
;;;131    		case CLKPWR_CLKTYPE_USB:
;;;132    			return USBClock;
;;;133    
;;;134    		default:
;;;135    			while(1);//error loop
;;;136    	}
;;;137    }
0000b0  4770              BX       lr
                  |L1.178|
0000b2  4823              LDR      r0,|L1.320|
0000b4  6800              LDR      r0,[r0,#0]            ;126  ; PeripheralClock
0000b6  e7fb              B        |L1.176|
                  |L1.184|
0000b8  4822              LDR      r0,|L1.324|
0000ba  6800              LDR      r0,[r0,#0]            ;129  ; EMCClock
0000bc  e7f8              B        |L1.176|
                  |L1.190|
0000be  4822              LDR      r0,|L1.328|
0000c0  6800              LDR      r0,[r0,#0]            ;132  ; USBClock
0000c2  e7f5              B        |L1.176|
                  |L1.196|
0000c4  bf00              NOP                            ;135
                  |L1.198|
0000c6  e7fe              B        |L1.198|
;;;138    
                          ENDP

                  CLKPWR_ConfigPPWR PROC
;;;182     **********************************************************************/
;;;183    void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
0000c8  2901              CMP      r1,#1
;;;184    {
;;;185    	if (NewState == ENABLE)
0000ca  d107              BNE      |L1.220|
;;;186    	{
;;;187    		LPC_SC->PCONP |= PPType;
0000cc  4a1f              LDR      r2,|L1.332|
0000ce  6812              LDR      r2,[r2,#0]
0000d0  ea420200          ORR      r2,r2,r0
0000d4  4b15              LDR      r3,|L1.300|
0000d6  f8c320c4          STR      r2,[r3,#0xc4]
0000da  e007              B        |L1.236|
                  |L1.220|
;;;188    	}
;;;189    	else if (NewState == DISABLE)
0000dc  b931              CBNZ     r1,|L1.236|
;;;190    	{
;;;191    		LPC_SC->PCONP &= ~PPType;
0000de  4a1b              LDR      r2,|L1.332|
0000e0  6812              LDR      r2,[r2,#0]
0000e2  ea220200          BIC      r2,r2,r0
0000e6  4b11              LDR      r3,|L1.300|
0000e8  f8c320c4          STR      r2,[r3,#0xc4]
                  |L1.236|
;;;192    	}
;;;193    }
0000ec  4770              BX       lr
;;;194    
                          ENDP

                  CLKPWR_Sleep PROC
;;;263     **********************************************************************/
;;;264    void CLKPWR_Sleep(void)
0000ee  2000              MOVS     r0,#0
;;;265    {
;;;266    	LPC_SC->PCON = 0x00;
0000f0  4917              LDR      r1,|L1.336|
0000f2  6008              STR      r0,[r1,#0]
;;;267    	/* Sleep Mode*/
;;;268    	__WFI();
0000f4  bf30              WFI      
;;;269    }
0000f6  4770              BX       lr
;;;270    
                          ENDP

                  CLKPWR_DeepSleep PROC
;;;276     **********************************************************************/
;;;277    void CLKPWR_DeepSleep(void)
0000f8  2004              MOVS     r0,#4
;;;278    {
;;;279        /* Deep-Sleep Mode, set SLEEPDEEP bit */
;;;280    	SCB->SCR = 0x4;
0000fa  4916              LDR      r1,|L1.340|
0000fc  6008              STR      r0,[r1,#0]
;;;281    	LPC_SC->PCON = 0x00;
0000fe  2000              MOVS     r0,#0
000100  4913              LDR      r1,|L1.336|
000102  6008              STR      r0,[r1,#0]
;;;282    	/* Deep Sleep Mode*/
;;;283    	__WFI();
000104  bf30              WFI      
;;;284    }
000106  4770              BX       lr
;;;285    
                          ENDP

                  CLKPWR_PowerDown PROC
;;;291     **********************************************************************/
;;;292    void CLKPWR_PowerDown(void)
000108  2004              MOVS     r0,#4
;;;293    {
;;;294        /* Deep-Sleep Mode, set SLEEPDEEP bit */
;;;295    	SCB->SCR = 0x4;
00010a  4912              LDR      r1,|L1.340|
00010c  6008              STR      r0,[r1,#0]
;;;296    	LPC_SC->PCON = 0x01;
00010e  2001              MOVS     r0,#1
000110  490f              LDR      r1,|L1.336|
000112  6008              STR      r0,[r1,#0]
;;;297    	/* Power Down Mode*/
;;;298    	__WFI();
000114  bf30              WFI      
;;;299    }
000116  4770              BX       lr
;;;300    
                          ENDP

                  CLKPWR_DeepPowerDown PROC
;;;306     **********************************************************************/
;;;307    void CLKPWR_DeepPowerDown(void)
000118  2004              MOVS     r0,#4
;;;308    {
;;;309        /* Deep-Sleep Mode, set SLEEPDEEP bit */
;;;310    	SCB->SCR = 0x4;
00011a  490e              LDR      r1,|L1.340|
00011c  6008              STR      r0,[r1,#0]
;;;311    	LPC_SC->PCON = 0x03;
00011e  2003              MOVS     r0,#3
000120  490b              LDR      r1,|L1.336|
000122  6008              STR      r0,[r1,#0]
;;;312    	/* Deep Power Down Mode*/
;;;313    	__WFI();
000124  bf30              WFI      
;;;314    }
000126  4770              BX       lr
;;;315    
                          ENDP

                  |L1.296|
                          DCD      0x400fc104
                  |L1.300|
                          DCD      0x400fc000
                  |L1.304|
                          DCD      0x400fc1a8
                  |L1.308|
                          DCD      0x400fc100
                  |L1.312|
                          DCD      0x400fc108
                  |L1.316|
                          DCD      SystemCoreClock
                  |L1.320|
                          DCD      PeripheralClock
                  |L1.324|
                          DCD      EMCClock
                  |L1.328|
                          DCD      USBClock
                  |L1.332|
                          DCD      0x400fc0c4
                  |L1.336|
                          DCD      0x400fc0c0
                  |L1.340|
                          DCD      0xe000ed10

                          AREA ||.data||, DATA, ALIGN=2

                  USBFrequency
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\source\\lpc_clkpwr.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_lpc_clkpwr_c_e699a9d5____REV16|
#line 115 "..\\..\\..\\..\\Core\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_lpc_clkpwr_c_e699a9d5____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_lpc_clkpwr_c_e699a9d5____REVSH|
#line 129
|__asm___12_lpc_clkpwr_c_e699a9d5____REVSH| PROC
#line 130

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
