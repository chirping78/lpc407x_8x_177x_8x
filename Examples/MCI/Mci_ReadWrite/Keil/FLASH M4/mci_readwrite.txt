; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o".\FLASH M4\mci_readwrite.o" --asm_dir=".\FLASH M4\\" --list_dir=".\FLASH M4\\" --depend=".\FLASH M4\mci_readwrite.d" --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\Core\CM3\DeviceSupport\NXP\LPC17xx -I..\..\..\..\Drivers\include -I..\..\..\..\BoardSupport -I..\..\..\..\Core\CMSIS\Include -I..\..\..\..\Core\Device\NXP\LPC407x_8x_177x_8x\Include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC407x_8x_177x_8x -D__MICROLIB -DCORE_M4 --omf_browse=".\FLASH M4\mci_readwrite.crf" ..\Mci_ReadWrite.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_IRQHandler PROC
;;;77     ******************************************************************************/
;;;78     void DMA_IRQHandler (void)
000000  b510              PUSH     {r4,lr}
;;;79     {
;;;80        MCI_DMA_IRQHandler();
000002  f7fffffe          BL       MCI_DMA_IRQHandler
;;;81     }
000006  bd10              POP      {r4,pc}
;;;82     #endif
                          ENDP

                  c_entry PROC
;;;87     ******************************************************************************/
;;;88     void c_entry (void)
000008  b08c              SUB      sp,sp,#0x30
;;;89     {
;;;90     	uint32_t i, j;
;;;91     	int32_t retVal = 0;
00000a  2400              MOVS     r4,#0
;;;92     	uint8_t error = 0;
00000c  46a1              MOV      r9,r4
;;;93     
;;;94     	st_Mci_CardId cidval;
;;;95     	en_Mci_CardType cardType;
;;;96     	uint32_t rcAddress;
;;;97     	uint32_t csdVal[4];
;;;98         uint32_t errorState;
;;;99     
;;;100    	// Initialize buffers for testing later
;;;101    	
;;;102    	for(i = 0; i < WRITE_LENGTH; i++)
00000e  2500              MOVS     r5,#0
000010  e007              B        |L1.34|
                  |L1.18|
;;;103    	{
;;;104    		wrBuf[i] = i / (4*WRITE_BLOCK_NUM);
000012  f3c51007          UBFX     r0,r5,#4,#8
000016  49dc              LDR      r1,|L1.904|
000018  5548              STRB     r0,[r1,r5]
;;;105    		rdBuf[i] = 0;
00001a  2000              MOVS     r0,#0
00001c  49db              LDR      r1,|L1.908|
00001e  5548              STRB     r0,[r1,r5]
000020  1c6d              ADDS     r5,r5,#1              ;102
                  |L1.34|
000022  f5b56f00          CMP      r5,#0x800             ;102
000026  d3f4              BCC      |L1.18|
;;;106    	}
;;;107    
;;;108    	debug_frmwrk_init();
000028  f7fffffe          BL       debug_frmwrk_init
;;;109    
;;;110    	_DBG_("");_DBG(mciRdWrMenu);_DBG_("");
00002c  a1d8              ADR      r1,|L1.912|
00002e  2000              MOVS     r0,#0
000030  4ad8              LDR      r2,|L1.916|
000032  6812              LDR      r2,[r2,#0]  ; _db_msg_
000034  4790              BLX      r2
000036  49d8              LDR      r1,|L1.920|
000038  2000              MOVS     r0,#0
00003a  4ad8              LDR      r2,|L1.924|
00003c  6812              LDR      r2,[r2,#0]  ; _db_msg
00003e  4790              BLX      r2
000040  a1d3              ADR      r1,|L1.912|
000042  2000              MOVS     r0,#0
000044  4ad3              LDR      r2,|L1.916|
000046  6812              LDR      r2,[r2,#0]  ; _db_msg_
000048  4790              BLX      r2
;;;111    
;;;112    #if MCI_DMA_ENABLED
;;;113    	/* on DMA channel 0, source is memory, destination is MCI FIFO. */
;;;114    	/* On DMA channel 1, source is MCI FIFO, destination is memory. */
;;;115    	GPDMA_Init();
00004a  f7fffffe          BL       GPDMA_Init
;;;116    #endif
;;;117    
;;;118    	/* For the SD card I tested, the minimum required block length is 512 */
;;;119    	/* For MMC, the restriction is loose, due to the variety of SD and MMC
;;;120    	card support, ideally, the driver should read CSD register to find the
;;;121    	right speed and block length for the card, and set them accordingly.
;;;122    	In this driver example, it will support both MMC and SD cards, and it
;;;123    	does read the information by send SEND_CSD to poll the card status,
;;;124    	however, to simplify the example, it doesn't configure them accordingly
;;;125    	based on the CSD register value. This is not intended to support all
;;;126    	the SD and MMC cards. */
;;;127    
;;;128    	if(MCI_Init(BRD_MCI_POWERED_ACTIVE_LEVEL) != MCI_FUNC_OK)
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       MCI_Init
000054  b130              CBZ      r0,|L1.100|
;;;129    	{
;;;130    		_DBG_("MCI_Init FAILED");
000056  a1d2              ADR      r1,|L1.928|
000058  2000              MOVS     r0,#0
00005a  4ace              LDR      r2,|L1.916|
00005c  6812              LDR      r2,[r2,#0]  ; _db_msg_
00005e  4790              BLX      r2
;;;131    
;;;132    		while( 1 );			/* fatal error */
000060  bf00              NOP      
                  |L1.98|
000062  e7fe              B        |L1.98|
                  |L1.100|
;;;133    	}
;;;134    
;;;135    	cardType = MCI_GetCardType();
000064  f7fffffe          BL       MCI_GetCardType
000068  4607              MOV      r7,r0
;;;136    
;;;137    	switch (cardType)
00006a  1c78              ADDS     r0,r7,#1
00006c  2805              CMP      r0,#5
00006e  d224              BCS      |L1.186|
000070  e8dff000          TBB      [pc,r0]
000074  1b0f1509          DCB      0x1b,0x0f,0x15,0x09
000078  0300              DCB      0x03,0x00
;;;138    	{
;;;139    		case MCI_SDHC_SDXC_CARD:
;;;140    			_DBG_("Currently the SDXC/SDHC CARD ver2.0 is being used");
00007a  a1cd              ADR      r1,|L1.944|
00007c  2000              MOVS     r0,#0
00007e  4ac5              LDR      r2,|L1.916|
000080  6812              LDR      r2,[r2,#0]  ; _db_msg_
000082  4790              BLX      r2
;;;141    			break;
000084  e019              B        |L1.186|
;;;142    		case MCI_SDSC_V2_CARD:
;;;143    			_DBG_("Currently the SD CARD ver2.0 is being used");
000086  a1d7              ADR      r1,|L1.996|
000088  2000              MOVS     r0,#0
00008a  4ac2              LDR      r2,|L1.916|
00008c  6812              LDR      r2,[r2,#0]  ; _db_msg_
00008e  4790              BLX      r2
;;;144    			break;
000090  e013              B        |L1.186|
;;;145    		case MCI_SDSC_V1_CARD:
;;;146    			_DBG_("Currently the SD CARD ver1.0 is being used");
000092  a1df              ADR      r1,|L1.1040|
000094  2000              MOVS     r0,#0
000096  4abf              LDR      r2,|L1.916|
000098  6812              LDR      r2,[r2,#0]  ; _db_msg_
00009a  4790              BLX      r2
;;;147    			break;
00009c  e00d              B        |L1.186|
;;;148    
;;;149    		case MCI_MMC_CARD:
;;;150    			_DBG_("Currently the MMC CARD is being used");
00009e  a1e7              ADR      r1,|L1.1084|
0000a0  2000              MOVS     r0,#0
0000a2  4abc              LDR      r2,|L1.916|
0000a4  6812              LDR      r2,[r2,#0]  ; _db_msg_
0000a6  4790              BLX      r2
;;;151    			break;
0000a8  e007              B        |L1.186|
;;;152    
;;;153    		case MCI_CARD_UNKNOWN:
;;;154    			_DBG_("No CARD is being plugged, Please check!!!");
0000aa  a1ee              ADR      r1,|L1.1124|
0000ac  2000              MOVS     r0,#0
0000ae  4ab9              LDR      r2,|L1.916|
0000b0  6812              LDR      r2,[r2,#0]  ; _db_msg_
0000b2  4790              BLX      r2
;;;155    			error = 1;
0000b4  f04f0901          MOV      r9,#1
;;;156    			break;
0000b8  bf00              NOP      
                  |L1.186|
0000ba  bf00              NOP                            ;141
;;;157    	}
;;;158        if(error)
0000bc  f1b90f00          CMP      r9,#0
0000c0  d001              BEQ      |L1.198|
;;;159        	while(1);
0000c2  bf00              NOP      
                  |L1.196|
0000c4  e7fe              B        |L1.196|
                  |L1.198|
;;;160    	if (MCI_GetCID(&cidval) != MCI_FUNC_OK)
0000c6  a805              ADD      r0,sp,#0x14
0000c8  f7fffffe          BL       MCI_GetCID
0000cc  b130              CBZ      r0,|L1.220|
;;;161    	{
;;;162    		_DBG_("Get CID Failed");
0000ce  a1f0              ADR      r1,|L1.1168|
0000d0  2000              MOVS     r0,#0
0000d2  4ab0              LDR      r2,|L1.916|
0000d4  6812              LDR      r2,[r2,#0]  ; _db_msg_
0000d6  4790              BLX      r2
;;;163    
;;;164    		while ( 1 );		/* fatal error */
0000d8  bf00              NOP      
                  |L1.218|
0000da  e7fe              B        |L1.218|
                  |L1.220|
;;;165    	}
;;;166    	else
;;;167    	{
;;;168    		_DBG("\t- Product Serial Number: ");_DBH32(cidval.PSN);_DBG_("");
0000dc  a1f0              ADR      r1,|L1.1184|
0000de  2000              MOVS     r0,#0
0000e0  4aae              LDR      r2,|L1.924|
0000e2  6812              LDR      r2,[r2,#0]  ; _db_msg
0000e4  4790              BLX      r2
0000e6  2000              MOVS     r0,#0
0000e8  4af4              LDR      r2,|L1.1212|
0000ea  9909              LDR      r1,[sp,#0x24]
0000ec  6812              LDR      r2,[r2,#0]  ; _db_hex_32
0000ee  4790              BLX      r2
0000f0  a1a7              ADR      r1,|L1.912|
0000f2  2000              MOVS     r0,#0
0000f4  4aa7              LDR      r2,|L1.916|
0000f6  6812              LDR      r2,[r2,#0]  ; _db_msg_
0000f8  4790              BLX      r2
;;;169    	}
;;;170    
;;;171    	/*---- Card is 'ident' state ----*/
;;;172    	retVal = MCI_SetCardAddress();
0000fa  f7fffffe          BL       MCI_SetCardAddress
0000fe  4604              MOV      r4,r0
;;;173    	if(retVal != MCI_FUNC_OK)
000100  b15c              CBZ      r4,|L1.282|
;;;174    	{
;;;175    		_DBG("Set Card Address is FAILED, retVal = "); _DBH32(retVal);
000102  a1ef              ADR      r1,|L1.1216|
000104  2000              MOVS     r0,#0
000106  4aa5              LDR      r2,|L1.924|
000108  6812              LDR      r2,[r2,#0]  ; _db_msg
00010a  4790              BLX      r2
00010c  4621              MOV      r1,r4
00010e  2000              MOVS     r0,#0
000110  4aea              LDR      r2,|L1.1212|
000112  6812              LDR      r2,[r2,#0]  ; _db_hex_32
000114  4790              BLX      r2
;;;176    		while(1);
000116  bf00              NOP      
                  |L1.280|
000118  e7fe              B        |L1.280|
                  |L1.282|
;;;177    	}
;;;178    	else
;;;179    	{
;;;180    		rcAddress = MCI_GetCardAddress();
00011a  f7fffffe          BL       MCI_GetCardAddress
00011e  4682              MOV      r10,r0
;;;181    		_DBG("Set CARD ADDRESS OK with address "); _DBH32(rcAddress);
000120  a1f1              ADR      r1,|L1.1256|
000122  2000              MOVS     r0,#0
000124  4a9d              LDR      r2,|L1.924|
000126  6812              LDR      r2,[r2,#0]  ; _db_msg
000128  4790              BLX      r2
00012a  4651              MOV      r1,r10
00012c  2000              MOVS     r0,#0
00012e  4ae3              LDR      r2,|L1.1212|
000130  6812              LDR      r2,[r2,#0]  ; _db_hex_32
000132  4790              BLX      r2
;;;182    	}
;;;183    
;;;184    	_DBG_("");
000134  a196              ADR      r1,|L1.912|
000136  2000              MOVS     r0,#0
000138  4a96              LDR      r2,|L1.916|
00013a  6812              LDR      r2,[r2,#0]  ; _db_msg_
00013c  4790              BLX      r2
;;;185    
;;;186    	retVal = MCI_GetCSD(csdVal);
00013e  a801              ADD      r0,sp,#4
000140  f7fffffe          BL       MCI_GetCSD
000144  4604              MOV      r4,r0
;;;187    	if(retVal != MCI_FUNC_OK)
000146  b15c              CBZ      r4,|L1.352|
;;;188    	{
;;;189    		_DBG("Get CSD FAILED, retVal = "); _DBH32(retVal);
000148  a1f0              ADR      r1,|L1.1292|
00014a  2000              MOVS     r0,#0
00014c  4a93              LDR      r2,|L1.924|
00014e  6812              LDR      r2,[r2,#0]  ; _db_msg
000150  4790              BLX      r2
000152  4621              MOV      r1,r4
000154  2000              MOVS     r0,#0
000156  4ad9              LDR      r2,|L1.1212|
000158  6812              LDR      r2,[r2,#0]  ; _db_hex_32
00015a  4790              BLX      r2
;;;190    		while(1);
00015c  bf00              NOP      
                  |L1.350|
00015e  e7fe              B        |L1.350|
                  |L1.352|
;;;191    	}
;;;192    	else
;;;193    	{
;;;194    		_DBG_("Get Card Specific Data (CSD) Ok:");
000160  a1f1              ADR      r1,|L1.1320|
000162  2000              MOVS     r0,#0
000164  4a8b              LDR      r2,|L1.916|
000166  6812              LDR      r2,[r2,#0]  ; _db_msg_
000168  4790              BLX      r2
;;;195    		_DBG("\t[0] = "); _DBH32(csdVal[0]);_DBG_("");
00016a  a1f8              ADR      r1,|L1.1356|
00016c  2000              MOVS     r0,#0
00016e  4a8b              LDR      r2,|L1.924|
000170  6812              LDR      r2,[r2,#0]  ; _db_msg
000172  4790              BLX      r2
000174  2000              MOVS     r0,#0
000176  4ad1              LDR      r2,|L1.1212|
000178  9901              LDR      r1,[sp,#4]
00017a  6812              LDR      r2,[r2,#0]  ; _db_hex_32
00017c  4790              BLX      r2
00017e  a184              ADR      r1,|L1.912|
000180  2000              MOVS     r0,#0
000182  4a84              LDR      r2,|L1.916|
000184  6812              LDR      r2,[r2,#0]  ; _db_msg_
000186  4790              BLX      r2
;;;196    		_DBG("\t[1] = "); _DBH32(csdVal[1]);_DBG_("");
000188  a1f2              ADR      r1,|L1.1364|
00018a  2000              MOVS     r0,#0
00018c  4a83              LDR      r2,|L1.924|
00018e  6812              LDR      r2,[r2,#0]  ; _db_msg
000190  4790              BLX      r2
000192  2000              MOVS     r0,#0
000194  4ac9              LDR      r2,|L1.1212|
000196  9902              LDR      r1,[sp,#8]
000198  6812              LDR      r2,[r2,#0]  ; _db_hex_32
00019a  4790              BLX      r2
00019c  a17c              ADR      r1,|L1.912|
00019e  2000              MOVS     r0,#0
0001a0  4a7c              LDR      r2,|L1.916|
0001a2  6812              LDR      r2,[r2,#0]  ; _db_msg_
0001a4  4790              BLX      r2
;;;197    		_DBG("\t[2] = "); _DBH32(csdVal[2]);_DBG_("");
0001a6  a1ed              ADR      r1,|L1.1372|
0001a8  2000              MOVS     r0,#0
0001aa  4a7c              LDR      r2,|L1.924|
0001ac  6812              LDR      r2,[r2,#0]  ; _db_msg
0001ae  4790              BLX      r2
0001b0  2000              MOVS     r0,#0
0001b2  4ac2              LDR      r2,|L1.1212|
0001b4  9903              LDR      r1,[sp,#0xc]
0001b6  6812              LDR      r2,[r2,#0]  ; _db_hex_32
0001b8  4790              BLX      r2
0001ba  a175              ADR      r1,|L1.912|
0001bc  2000              MOVS     r0,#0
0001be  4a75              LDR      r2,|L1.916|
0001c0  6812              LDR      r2,[r2,#0]  ; _db_msg_
0001c2  4790              BLX      r2
;;;198    		_DBG("\t[3] = "); _DBH32(csdVal[3]);_DBG_("");
0001c4  a1e7              ADR      r1,|L1.1380|
0001c6  2000              MOVS     r0,#0
0001c8  4a74              LDR      r2,|L1.924|
0001ca  6812              LDR      r2,[r2,#0]  ; _db_msg
0001cc  4790              BLX      r2
0001ce  2000              MOVS     r0,#0
0001d0  4aba              LDR      r2,|L1.1212|
0001d2  9904              LDR      r1,[sp,#0x10]
0001d4  6812              LDR      r2,[r2,#0]  ; _db_hex_32
0001d6  4790              BLX      r2
0001d8  a16d              ADR      r1,|L1.912|
0001da  2000              MOVS     r0,#0
0001dc  4a6d              LDR      r2,|L1.916|
0001de  6812              LDR      r2,[r2,#0]  ; _db_msg_
0001e0  4790              BLX      r2
;;;199    	}
;;;200    	
;;;201    	retVal = MCI_Cmd_SelectCard();
0001e2  f7fffffe          BL       MCI_Cmd_SelectCard
0001e6  4604              MOV      r4,r0
;;;202    
;;;203    	if(retVal != MCI_FUNC_OK)
0001e8  b15c              CBZ      r4,|L1.514|
;;;204    	{
;;;205    		_DBG("Card Selection is FAILED, retVal = "); _DBH32(retVal);
0001ea  a1e0              ADR      r1,|L1.1388|
0001ec  2000              MOVS     r0,#0
0001ee  4a6b              LDR      r2,|L1.924|
0001f0  6812              LDR      r2,[r2,#0]  ; _db_msg
0001f2  4790              BLX      r2
0001f4  4621              MOV      r1,r4
0001f6  2000              MOVS     r0,#0
0001f8  4ab0              LDR      r2,|L1.1212|
0001fa  6812              LDR      r2,[r2,#0]  ; _db_hex_32
0001fc  4790              BLX      r2
;;;206    		while(1);
0001fe  bf00              NOP      
                  |L1.512|
000200  e7fe              B        |L1.512|
                  |L1.514|
;;;207    	}
;;;208    	else
;;;209    	{
;;;210    		_DBG("Card has been selected successfully!!!\n\r");
000202  a1e3              ADR      r1,|L1.1424|
000204  2000              MOVS     r0,#0
000206  4a65              LDR      r2,|L1.924|
000208  6812              LDR      r2,[r2,#0]  ; _db_msg
00020a  4790              BLX      r2
;;;211    	}
;;;212    
;;;213    	if(cardType == MCI_SDSC_V1_CARD||
00020c  b11f              CBZ      r7,|L1.534|
;;;214    		cardType == MCI_SDSC_V2_CARD||
00020e  2f02              CMP      r7,#2
000210  d001              BEQ      |L1.534|
;;;215    		cardType == MCI_SDHC_SDXC_CARD)
000212  2f03              CMP      r7,#3
000214  d117              BNE      |L1.582|
                  |L1.534|
;;;216    	{
;;;217    		MCI_Set_MCIClock( MCI_NORMAL_RATE );
000216  2002              MOVS     r0,#2
000218  f7fffffe          BL       MCI_Set_MCIClock
;;;218    		
;;;219    		if (MCI_SetBusWidth( SD_4_BIT ) != MCI_FUNC_OK )
00021c  2001              MOVS     r0,#1
00021e  f7fffffe          BL       MCI_SetBusWidth
000222  b158              CBZ      r0,|L1.572|
;;;220    		{
;;;221    			_DBG("Set BandWidth is FAILED, retVal = "); _DBH32(retVal);
000224  a1e5              ADR      r1,|L1.1468|
000226  2000              MOVS     r0,#0
000228  4a5c              LDR      r2,|L1.924|
00022a  6812              LDR      r2,[r2,#0]  ; _db_msg
00022c  4790              BLX      r2
00022e  4621              MOV      r1,r4
000230  2000              MOVS     r0,#0
000232  4aa2              LDR      r2,|L1.1212|
000234  6812              LDR      r2,[r2,#0]  ; _db_hex_32
000236  4790              BLX      r2
;;;222    			while (1);	/* fatal error */
000238  bf00              NOP      
                  |L1.570|
00023a  e7fe              B        |L1.570|
                  |L1.572|
;;;223    		}
;;;224    		else
;;;225    		{
;;;226    			_DBG("SET Bandwidth!!!\n\r");
00023c  a1e8              ADR      r1,|L1.1504|
00023e  2000              MOVS     r0,#0
000240  4a56              LDR      r2,|L1.924|
000242  6812              LDR      r2,[r2,#0]  ; _db_msg
000244  4790              BLX      r2
                  |L1.582|
;;;227    		}
;;;228    	}
;;;229    
;;;230    	retVal = MCI_SetBlockLen(BLOCK_LENGTH);
000246  f44f7000          MOV      r0,#0x200
00024a  f7fffffe          BL       MCI_SetBlockLen
00024e  4604              MOV      r4,r0
;;;231    	if(retVal != MCI_FUNC_OK)
000250  b15c              CBZ      r4,|L1.618|
;;;232    	{
;;;233    		_DBG("Set Block Length is FAILED, retVal = "); _DBH32(retVal);
000252  a1e8              ADR      r1,|L1.1524|
000254  2000              MOVS     r0,#0
000256  4a51              LDR      r2,|L1.924|
000258  6812              LDR      r2,[r2,#0]  ; _db_msg
00025a  4790              BLX      r2
00025c  4621              MOV      r1,r4
00025e  2000              MOVS     r0,#0
000260  4a96              LDR      r2,|L1.1212|
000262  6812              LDR      r2,[r2,#0]  ; _db_hex_32
000264  4790              BLX      r2
;;;234    		while(1);
000266  bf00              NOP      
                  |L1.616|
000268  e7fe              B        |L1.616|
                  |L1.618|
;;;235    	}
;;;236    	else
;;;237    	{
;;;238    		_DBG("Block Length is SET successfully!!!\n\r");
00026a  a1ec              ADR      r1,|L1.1564|
00026c  2000              MOVS     r0,#0
00026e  4a4b              LDR      r2,|L1.924|
000270  6812              LDR      r2,[r2,#0]  ; _db_msg
000272  4790              BLX      r2
;;;239    	}
;;;240    
;;;241    	retVal = MCI_WriteBlock(wrBuf, 0, WRITE_BLOCK_NUM);
000274  2204              MOVS     r2,#4
000276  2100              MOVS     r1,#0
000278  4843              LDR      r0,|L1.904|
00027a  f7fffffe          BL       MCI_WriteBlock
00027e  4604              MOV      r4,r0
;;;242    	if(retVal != MCI_FUNC_OK)
000280  b15c              CBZ      r4,|L1.666|
;;;243    	{
;;;244    		_DBG("Write Block is FAILED, retVal = "); _DBH32(retVal);
000282  a1f0              ADR      r1,|L1.1604|
000284  2000              MOVS     r0,#0
000286  4a45              LDR      r2,|L1.924|
000288  6812              LDR      r2,[r2,#0]  ; _db_msg
00028a  4790              BLX      r2
00028c  4621              MOV      r1,r4
00028e  2000              MOVS     r0,#0
000290  4a8a              LDR      r2,|L1.1212|
000292  6812              LDR      r2,[r2,#0]  ; _db_hex_32
000294  4790              BLX      r2
;;;245    		while(1);
000296  bf00              NOP      
                  |L1.664|
000298  e7fe              B        |L1.664|
                  |L1.666|
;;;246    	}
;;;247    	else
;;;248    	{
;;;249    		//while(MCI_GetBlockXferEndState() != 0);
;;;250    		while(MCI_GetDataXferEndState() != 0);
00029a  bf00              NOP      
                  |L1.668|
00029c  f7fffffe          BL       MCI_GetDataXferEndState
0002a0  2800              CMP      r0,#0
0002a2  d1fb              BNE      |L1.668|
;;;251            errorState = MCI_GetXferErrState();		
0002a4  f7fffffe          BL       MCI_GetXferErrState
0002a8  4680              MOV      r8,r0
;;;252    		if((WRITE_BLOCK_NUM > 1) || errorState);
;;;253    		{
;;;254    			MCI_Cmd_StopTransmission();
0002aa  f7fffffe          BL       MCI_Cmd_StopTransmission
;;;255    		}
;;;256    		
;;;257            if(errorState)
0002ae  f1b80f00          CMP      r8,#0
0002b2  d019              BEQ      |L1.744|
;;;258            {
;;;259                _DBG("Write ");_DBD(WRITE_BLOCK_NUM);_DBG(" Failed (");_DBH32(errorState);_DBG_(")");
0002b4  a1ec              ADR      r1,|L1.1640|
0002b6  2000              MOVS     r0,#0
0002b8  4a38              LDR      r2,|L1.924|
0002ba  6812              LDR      r2,[r2,#0]  ; _db_msg
0002bc  4790              BLX      r2
0002be  2104              MOVS     r1,#4
0002c0  2000              MOVS     r0,#0
0002c2  4aeb              LDR      r2,|L1.1648|
0002c4  6812              LDR      r2,[r2,#0]  ; _db_dec
0002c6  4790              BLX      r2
0002c8  a1ea              ADR      r1,|L1.1652|
0002ca  2000              MOVS     r0,#0
0002cc  4a33              LDR      r2,|L1.924|
0002ce  6812              LDR      r2,[r2,#0]  ; _db_msg
0002d0  4790              BLX      r2
0002d2  4641              MOV      r1,r8
0002d4  2000              MOVS     r0,#0
0002d6  4a79              LDR      r2,|L1.1212|
0002d8  6812              LDR      r2,[r2,#0]  ; _db_hex_32
0002da  4790              BLX      r2
0002dc  a1e8              ADR      r1,|L1.1664|
0002de  2000              MOVS     r0,#0
0002e0  4a2c              LDR      r2,|L1.916|
0002e2  6812              LDR      r2,[r2,#0]  ; _db_msg_
0002e4  4790              BLX      r2
0002e6  e00e              B        |L1.774|
                  |L1.744|
;;;260            }
;;;261            else
;;;262            {
;;;263    		    _DBG("Write ");_DBD(WRITE_BLOCK_NUM);_DBG(" Blocks successfully!!!\n\r");
0002e8  a1df              ADR      r1,|L1.1640|
0002ea  2000              MOVS     r0,#0
0002ec  4a2b              LDR      r2,|L1.924|
0002ee  6812              LDR      r2,[r2,#0]  ; _db_msg
0002f0  4790              BLX      r2
0002f2  2104              MOVS     r1,#4
0002f4  2000              MOVS     r0,#0
0002f6  4ade              LDR      r2,|L1.1648|
0002f8  6812              LDR      r2,[r2,#0]  ; _db_dec
0002fa  4790              BLX      r2
0002fc  a1e1              ADR      r1,|L1.1668|
0002fe  2000              MOVS     r0,#0
000300  4a26              LDR      r2,|L1.924|
000302  6812              LDR      r2,[r2,#0]  ; _db_msg
000304  4790              BLX      r2
                  |L1.774|
;;;264            }
;;;265    	}
;;;266    
;;;267    	// Delay 500ms
;;;268    	for ( i = 0; i < 0x500000; i++ );
000306  2500              MOVS     r5,#0
000308  e000              B        |L1.780|
                  |L1.778|
00030a  1c6d              ADDS     r5,r5,#1
                  |L1.780|
00030c  f5b50fa0          CMP      r5,#0x500000
000310  d3fb              BCC      |L1.778|
;;;269    
;;;270    	retVal = MCI_ReadBlock(rdBuf, 0, WRITE_BLOCK_NUM);
000312  2204              MOVS     r2,#4
000314  2100              MOVS     r1,#0
000316  481d              LDR      r0,|L1.908|
000318  f7fffffe          BL       MCI_ReadBlock
00031c  4604              MOV      r4,r0
;;;271    	if(retVal != MCI_FUNC_OK)
00031e  b15c              CBZ      r4,|L1.824|
;;;272    	{
;;;273    		_DBG("Read Block is FAILED, retVal = "); _DBH32(retVal);
000320  a1df              ADR      r1,|L1.1696|
000322  2000              MOVS     r0,#0
000324  4a1d              LDR      r2,|L1.924|
000326  6812              LDR      r2,[r2,#0]  ; _db_msg
000328  4790              BLX      r2
00032a  4621              MOV      r1,r4
00032c  2000              MOVS     r0,#0
00032e  4a63              LDR      r2,|L1.1212|
000330  6812              LDR      r2,[r2,#0]  ; _db_hex_32
000332  4790              BLX      r2
;;;274    		while(1);
000334  bf00              NOP      
                  |L1.822|
000336  e7fe              B        |L1.822|
                  |L1.824|
;;;275    	}
;;;276    	else
;;;277    	{
;;;278    		//while(MCI_GetBlockXferEndState() != 0);
;;;279    		while(MCI_GetDataXferEndState() != 0);
000338  bf00              NOP      
                  |L1.826|
00033a  f7fffffe          BL       MCI_GetDataXferEndState
00033e  2800              CMP      r0,#0
000340  d1fb              BNE      |L1.826|
;;;280    		errorState = MCI_GetXferErrState();		
000342  f7fffffe          BL       MCI_GetXferErrState
000346  4680              MOV      r8,r0
;;;281    		if((WRITE_BLOCK_NUM > 1) || errorState);
;;;282    		{
;;;283    			MCI_Cmd_StopTransmission();
000348  f7fffffe          BL       MCI_Cmd_StopTransmission
;;;284    		}
;;;285    		
;;;286            if(errorState)
00034c  f1b80f00          CMP      r8,#0
000350  d019              BEQ      |L1.902|
;;;287            {
;;;288                _DBG("Read ");_DBD(WRITE_BLOCK_NUM);_DBG(" Failed (");_DBH32(errorState);_DBG_(")");
000352  a1db              ADR      r1,|L1.1728|
000354  2000              MOVS     r0,#0
000356  4a11              LDR      r2,|L1.924|
000358  6812              LDR      r2,[r2,#0]  ; _db_msg
00035a  4790              BLX      r2
00035c  2104              MOVS     r1,#4
00035e  2000              MOVS     r0,#0
000360  4ac3              LDR      r2,|L1.1648|
000362  6812              LDR      r2,[r2,#0]  ; _db_dec
000364  4790              BLX      r2
000366  a1c3              ADR      r1,|L1.1652|
000368  2000              MOVS     r0,#0
00036a  4a0c              LDR      r2,|L1.924|
00036c  6812              LDR      r2,[r2,#0]  ; _db_msg
00036e  4790              BLX      r2
000370  4641              MOV      r1,r8
000372  2000              MOVS     r0,#0
000374  4a51              LDR      r2,|L1.1212|
000376  6812              LDR      r2,[r2,#0]  ; _db_hex_32
000378  4790              BLX      r2
00037a  a1c1              ADR      r1,|L1.1664|
00037c  2000              MOVS     r0,#0
00037e  4a05              LDR      r2,|L1.916|
000380  6812              LDR      r2,[r2,#0]  ; _db_msg_
000382  4790              BLX      r2
000384  e1b1              B        |L1.1770|
                  |L1.902|
000386  e19f              B        |L1.1736|
                  |L1.904|
                          DCD      wrBuf
                  |L1.908|
                          DCD      rdBuf
                  |L1.912|
000390  00                DCB      0
000391  00                DCB      0
000392  00                DCB      0
000393  00                DCB      0
                  |L1.916|
                          DCD      _db_msg_
                  |L1.920|
                          DCD      mciRdWrMenu
                  |L1.924|
                          DCD      _db_msg
                  |L1.928|
0003a0  4d43495f          DCB      "MCI_Init FAILED",0
0003a4  496e6974
0003a8  20464149
0003ac  4c454400
                  |L1.944|
0003b0  43757272          DCB      "Currently the SDXC/SDHC CARD ver2.0 is being used",0
0003b4  656e746c
0003b8  79207468
0003bc  65205344
0003c0  58432f53
0003c4  44484320
0003c8  43415244
0003cc  20766572
0003d0  322e3020
0003d4  69732062
0003d8  65696e67
0003dc  20757365
0003e0  6400    
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L1.996|
0003e4  43757272          DCB      "Currently the SD CARD ver2.0 is being used",0
0003e8  656e746c
0003ec  79207468
0003f0  65205344
0003f4  20434152
0003f8  44207665
0003fc  72322e30
000400  20697320
000404  6265696e
000408  67207573
00040c  656400  
00040f  00                DCB      0
                  |L1.1040|
000410  43757272          DCB      "Currently the SD CARD ver1.0 is being used",0
000414  656e746c
000418  79207468
00041c  65205344
000420  20434152
000424  44207665
000428  72312e30
00042c  20697320
000430  6265696e
000434  67207573
000438  656400  
00043b  00                DCB      0
                  |L1.1084|
00043c  43757272          DCB      "Currently the MMC CARD is being used",0
000440  656e746c
000444  79207468
000448  65204d4d
00044c  43204341
000450  52442069
000454  73206265
000458  696e6720
00045c  75736564
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L1.1124|
000464  4e6f2043          DCB      "No CARD is being plugged, Please check!!!",0
000468  41524420
00046c  69732062
000470  65696e67
000474  20706c75
000478  67676564
00047c  2c20506c
000480  65617365
000484  20636865
000488  636b2121
00048c  2100    
00048e  00                DCB      0
00048f  00                DCB      0
                  |L1.1168|
000490  47657420          DCB      "Get CID Failed",0
000494  43494420
000498  4661696c
00049c  656400  
00049f  00                DCB      0
                  |L1.1184|
0004a0  092d2050          DCB      "\t- Product Serial Number: ",0
0004a4  726f6475
0004a8  63742053
0004ac  65726961
0004b0  6c204e75
0004b4  6d626572
0004b8  3a2000  
0004bb  00                DCB      0
                  |L1.1212|
                          DCD      _db_hex_32
                  |L1.1216|
0004c0  53657420          DCB      "Set Card Address is FAILED, retVal = ",0
0004c4  43617264
0004c8  20416464
0004cc  72657373
0004d0  20697320
0004d4  4641494c
0004d8  45442c20
0004dc  72657456
0004e0  616c203d
0004e4  2000    
0004e6  00                DCB      0
0004e7  00                DCB      0
                  |L1.1256|
0004e8  53657420          DCB      "Set CARD ADDRESS OK with address ",0
0004ec  43415244
0004f0  20414444
0004f4  52455353
0004f8  204f4b20
0004fc  77697468
000500  20616464
000504  72657373
000508  2000    
00050a  00                DCB      0
00050b  00                DCB      0
                  |L1.1292|
00050c  47657420          DCB      "Get CSD FAILED, retVal = ",0
000510  43534420
000514  4641494c
000518  45442c20
00051c  72657456
000520  616c203d
000524  2000    
000526  00                DCB      0
000527  00                DCB      0
                  |L1.1320|
000528  47657420          DCB      "Get Card Specific Data (CSD) Ok:",0
00052c  43617264
000530  20537065
000534  63696669
000538  63204461
00053c  74612028
000540  43534429
000544  204f6b3a
000548  00      
000549  00                DCB      0
00054a  00                DCB      0
00054b  00                DCB      0
                  |L1.1356|
00054c  095b305d          DCB      "\t[0] = ",0
000550  203d2000
                  |L1.1364|
000554  095b315d          DCB      "\t[1] = ",0
000558  203d2000
                  |L1.1372|
00055c  095b325d          DCB      "\t[2] = ",0
000560  203d2000
                  |L1.1380|
000564  095b335d          DCB      "\t[3] = ",0
000568  203d2000
                  |L1.1388|
00056c  43617264          DCB      "Card Selection is FAILED, retVal = ",0
000570  2053656c
000574  65637469
000578  6f6e2069
00057c  73204641
000580  494c4544
000584  2c207265
000588  7456616c
00058c  203d2000
                  |L1.1424|
000590  43617264          DCB      "Card has been selected successfully!!!\n\r",0
000594  20686173
000598  20626565
00059c  6e207365
0005a0  6c656374
0005a4  65642073
0005a8  75636365
0005ac  73736675
0005b0  6c6c7921
0005b4  21210a0d
0005b8  00      
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  53657420          DCB      "Set BandWidth is FAILED, retVal = ",0
0005c0  42616e64
0005c4  57696474
0005c8  68206973
0005cc  20464149
0005d0  4c45442c
0005d4  20726574
0005d8  56616c20
0005dc  3d2000  
0005df  00                DCB      0
                  |L1.1504|
0005e0  53455420          DCB      "SET Bandwidth!!!\n\r",0
0005e4  42616e64
0005e8  77696474
0005ec  68212121
0005f0  0a0d00  
0005f3  00                DCB      0
                  |L1.1524|
0005f4  53657420          DCB      "Set Block Length is FAILED, retVal = ",0
0005f8  426c6f63
0005fc  6b204c65
000600  6e677468
000604  20697320
000608  4641494c
00060c  45442c20
000610  72657456
000614  616c203d
000618  2000    
00061a  00                DCB      0
00061b  00                DCB      0
                  |L1.1564|
00061c  426c6f63          DCB      "Block Length is SET successfully!!!\n\r",0
000620  6b204c65
000624  6e677468
000628  20697320
00062c  53455420
000630  73756363
000634  65737366
000638  756c6c79
00063c  2121210a
000640  0d00    
000642  00                DCB      0
000643  00                DCB      0
                  |L1.1604|
000644  57726974          DCB      "Write Block is FAILED, retVal = ",0
000648  6520426c
00064c  6f636b20
000650  69732046
000654  41494c45
000658  442c2072
00065c  65745661
000660  6c203d20
000664  00      
000665  00                DCB      0
000666  00                DCB      0
000667  00                DCB      0
                  |L1.1640|
000668  57726974          DCB      "Write ",0
00066c  652000  
00066f  00                DCB      0
                  |L1.1648|
                          DCD      _db_dec
                  |L1.1652|
000674  20466169          DCB      " Failed (",0
000678  6c656420
00067c  2800    
00067e  00                DCB      0
00067f  00                DCB      0
                  |L1.1664|
000680  2900              DCB      ")",0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  20426c6f          DCB      " Blocks successfully!!!\n\r",0
000688  636b7320
00068c  73756363
000690  65737366
000694  756c6c79
000698  2121210a
00069c  0d00    
00069e  00                DCB      0
00069f  00                DCB      0
                  |L1.1696|
0006a0  52656164          DCB      "Read Block is FAILED, retVal = ",0
0006a4  20426c6f
0006a8  636b2069
0006ac  73204641
0006b0  494c4544
0006b4  2c207265
0006b8  7456616c
0006bc  203d2000
                  |L1.1728|
0006c0  52656164          DCB      "Read ",0
0006c4  2000    
0006c6  00                DCB      0
0006c7  00                DCB      0
                  |L1.1736|
;;;289            }
;;;290            else
;;;291            {
;;;292    		    _DBG("Read ");_DBD(WRITE_BLOCK_NUM);_DBG(" Blocks successfully!!!\n\r");
0006c8  f2af010c          ADR      r1,|L1.1728|
0006cc  2000              MOVS     r0,#0
0006ce  4a1c              LDR      r2,|L1.1856|
0006d0  6812              LDR      r2,[r2,#0]  ; _db_msg
0006d2  4790              BLX      r2
0006d4  2104              MOVS     r1,#4
0006d6  2000              MOVS     r0,#0
0006d8  4a1a              LDR      r2,|L1.1860|
0006da  6812              LDR      r2,[r2,#0]  ; _db_dec
0006dc  4790              BLX      r2
0006de  f2af015c          ADR      r1,|L1.1668|
0006e2  2000              MOVS     r0,#0
0006e4  4a16              LDR      r2,|L1.1856|
0006e6  6812              LDR      r2,[r2,#0]  ; _db_msg
0006e8  4790              BLX      r2
                  |L1.1770|
;;;293            }
;;;294    	}
;;;295    
;;;296    	retVal = MCI_FUNC_OK;
0006ea  2400              MOVS     r4,#0
;;;297    
;;;298    	for (j = 0; j < WRITE_LENGTH; j++)
0006ec  2600              MOVS     r6,#0
0006ee  e013              B        |L1.1816|
                  |L1.1776|
;;;299    	{
;;;300    		if(rdBuf[j] != wrBuf[j])
0006f0  4815              LDR      r0,|L1.1864|
0006f2  5d80              LDRB     r0,[r0,r6]
0006f4  4915              LDR      r1,|L1.1868|
0006f6  5d89              LDRB     r1,[r1,r6]
0006f8  4288              CMP      r0,r1
0006fa  d00c              BEQ      |L1.1814|
;;;301    		{
;;;302    			_DBG("ERROR on Read and Write at position: "); _DBH32(j);
0006fc  a114              ADR      r1,|L1.1872|
0006fe  2000              MOVS     r0,#0
000700  4a0f              LDR      r2,|L1.1856|
000702  6812              LDR      r2,[r2,#0]  ; _db_msg
000704  4790              BLX      r2
000706  4631              MOV      r1,r6
000708  2000              MOVS     r0,#0
00070a  4a1b              LDR      r2,|L1.1912|
00070c  6812              LDR      r2,[r2,#0]  ; _db_hex_32
00070e  4790              BLX      r2
;;;303    			retVal = MCI_FUNC_FAILED;
000710  f04f34ff          MOV      r4,#0xffffffff
;;;304    			break;
000714  e003              B        |L1.1822|
                  |L1.1814|
000716  1c76              ADDS     r6,r6,#1              ;298
                  |L1.1816|
000718  f5b66f00          CMP      r6,#0x800             ;298
00071c  d3e8              BCC      |L1.1776|
                  |L1.1822|
00071e  bf00              NOP      
;;;305    		}
;;;306    	}
;;;307    
;;;308    	if(retVal == MCI_FUNC_OK)
000720  b924              CBNZ     r4,|L1.1836|
;;;309    	{
;;;310    		_DBG("CHECKING is done! Read and Write correct!!!\n\r");
000722  a116              ADR      r1,|L1.1916|
000724  2000              MOVS     r0,#0
000726  4a06              LDR      r2,|L1.1856|
000728  6812              LDR      r2,[r2,#0]  ; _db_msg
00072a  4790              BLX      r2
                  |L1.1836|
;;;311    	}
;;;312    
;;;313    	_DBG("\n\r>>> EXAMPLES is ENDED ");
00072c  a11f              ADR      r1,|L1.1964|
00072e  2000              MOVS     r0,#0
000730  4a03              LDR      r2,|L1.1856|
000732  6812              LDR      r2,[r2,#0]  ; _db_msg
000734  4790              BLX      r2
;;;314    
;;;315    	while(1);
000736  bf00              NOP      
                  |L1.1848|
000738  e7fe              B        |L1.1848|
;;;316    
;;;317    }
;;;318    int main(void)
                          ENDP

                  main PROC
00073a  f7fffffe          BL       c_entry
;;;319    {
;;;320       c_entry();
;;;321       return 0;
;;;322    }
;;;323    /******************************************************************************
                          ENDP

00073e  0000              DCW      0x0000
                  |L1.1856|
                          DCD      _db_msg
                  |L1.1860|
                          DCD      _db_dec
                  |L1.1864|
                          DCD      rdBuf
                  |L1.1868|
                          DCD      wrBuf
                  |L1.1872|
000750  4552524f          DCB      "ERROR on Read and Write at position: ",0
000754  52206f6e
000758  20526561
00075c  6420616e
000760  64205772
000764  69746520
000768  61742070
00076c  6f736974
000770  696f6e3a
000774  2000    
000776  00                DCB      0
000777  00                DCB      0
                  |L1.1912|
                          DCD      _db_hex_32
                  |L1.1916|
00077c  43484543          DCB      "CHECKING is done! Read and Write correct!!!\n\r",0
000780  4b494e47
000784  20697320
000788  646f6e65
00078c  21205265
000790  61642061
000794  6e642057
000798  72697465
00079c  20636f72
0007a0  72656374
0007a4  2121210a
0007a8  0d00    
0007aa  00                DCB      0
0007ab  00                DCB      0
                  |L1.1964|
0007ac  0a0d3e3e          DCB      "\n\r>>> EXAMPLES is ENDED ",0
0007b0  3e204558
0007b4  414d504c
0007b8  45532069
0007bc  7320454e
0007c0  44454420
0007c4  00      
0007c5  00                DCB      0
0007c6  00                DCB      0
0007c7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  wrBuf
                          %        2048
                  rdBuf
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  mciRdWrMenu
000000  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000004  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000008  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00000c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000010  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000014  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000018  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00001c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000020  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000024  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000028  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00002c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000030  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000034  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000038  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00003c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000040  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000044  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000048  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00004c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000050  0a0d2048          DCB      0x0a,0x0d,0x20,0x48
000054  656c6c6f          DCB      0x65,0x6c,0x6c,0x6f
000058  204e5850          DCB      0x20,0x4e,0x58,0x50
00005c  2053656d          DCB      0x20,0x53,0x65,0x6d
000060  69636f6e          DCB      0x69,0x63,0x6f,0x6e
000064  64756374          DCB      0x64,0x75,0x63,0x74
000068  6f727320          DCB      0x6f,0x72,0x73,0x20
00006c  0a0d204d          DCB      0x0a,0x0d,0x20,0x4d
000070  43492052          DCB      0x43,0x49,0x20,0x52
000074  65616420          DCB      0x65,0x61,0x64,0x20
000078  57726974          DCB      0x57,0x72,0x69,0x74
00007c  65204578          DCB      0x65,0x20,0x45,0x78
000080  616d706c          DCB      0x61,0x6d,0x70,0x6c
000084  653a200a          DCB      0x65,0x3a,0x20,0x0a
000088  0d09202d          DCB      0x0d,0x09,0x20,0x2d
00008c  204d4355          DCB      0x20,0x4d,0x43,0x55
000090  3a204c50          DCB      0x3a,0x20,0x4c,0x50
000094  43200a0d          DCB      0x43,0x20,0x0a,0x0d
000098  09202d20          DCB      0x09,0x20,0x2d,0x20
00009c  436f7265          DCB      0x43,0x6f,0x72,0x65
0000a0  3a204152          DCB      0x3a,0x20,0x41,0x52
0000a4  4d20434f          DCB      0x4d,0x20,0x43,0x4f
0000a8  52544558          DCB      0x52,0x54,0x45,0x58
0000ac  2d4d332f          DCB      0x2d,0x4d,0x33,0x2f
0000b0  4d34200a          DCB      0x4d,0x34,0x20,0x0a
0000b4  0d09202d          DCB      0x0d,0x09,0x20,0x2d
0000b8  20554152          DCB      0x20,0x55,0x41,0x52
0000bc  5420436f          DCB      0x54,0x20,0x43,0x6f
0000c0  6d6d756e          DCB      0x6d,0x6d,0x75,0x6e
0000c4  69636174          DCB      0x69,0x63,0x61,0x74
0000c8  696f6e69          DCB      0x69,0x6f,0x6e,0x69
0000cc  3a203131          DCB      0x3a,0x20,0x31,0x31
0000d0  35323030          DCB      0x35,0x32,0x30,0x30
0000d4  20627073          DCB      0x20,0x62,0x70,0x73
0000d8  200a0d20          DCB      0x20,0x0a,0x0d,0x20
0000dc  54686973          DCB      0x54,0x68,0x69,0x73
0000e0  20657861          DCB      0x20,0x65,0x78,0x61
0000e4  6d706c65          DCB      0x6d,0x70,0x6c,0x65
0000e8  20697320          DCB      0x20,0x69,0x73,0x20
0000ec  75736564          DCB      0x75,0x73,0x65,0x64
0000f0  20746f20          DCB      0x20,0x74,0x6f,0x20
0000f4  74657374          DCB      0x74,0x65,0x73,0x74
0000f8  20746865          DCB      0x20,0x74,0x68,0x65
0000fc  204d756c          DCB      0x20,0x4d,0x75,0x6c
000100  74696d65          DCB      0x74,0x69,0x6d,0x65
000104  64696120          DCB      0x64,0x69,0x61,0x20
000108  43617264          DCB      0x43,0x61,0x72,0x64
00010c  20496e74          DCB      0x20,0x49,0x6e,0x74
000110  65726661          DCB      0x65,0x72,0x66,0x61
000114  63652028          DCB      0x63,0x65,0x20,0x28
000118  4d434929          DCB      0x4d,0x43,0x49,0x29
00011c  2066756e          DCB      0x20,0x66,0x75,0x6e
000120  6374696f          DCB      0x63,0x74,0x69,0x6f
000124  6e2e0a0d          DCB      0x6e,0x2e,0x0a,0x0d
000128  20497420          DCB      0x20,0x49,0x74,0x20
00012c  69732061          DCB      0x69,0x73,0x20,0x61
000130  626c6520          DCB      0x62,0x6c,0x65,0x20
000134  746f2075          DCB      0x74,0x6f,0x20,0x75
000138  73652044          DCB      0x73,0x65,0x20,0x44
00013c  4d412074          DCB      0x4d,0x41,0x20,0x74
000140  6f207472          DCB      0x6f,0x20,0x74,0x72
000144  616e7366          DCB      0x61,0x6e,0x73,0x66
000148  65722064          DCB      0x65,0x72,0x20,0x64
00014c  61746120          DCB      0x61,0x74,0x61,0x20
000150  28726561          DCB      0x28,0x72,0x65,0x61
000154  642f7772          DCB      0x64,0x2f,0x77,0x72
000158  69746529          DCB      0x69,0x74,0x65,0x29
00015c  20776974          DCB      0x20,0x77,0x69,0x74
000160  68207468          DCB      0x68,0x20,0x74,0x68
000164  65206361          DCB      0x65,0x20,0x63,0x61
000168  72640a0d          DCB      0x72,0x64,0x0a,0x0d
00016c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000170  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000174  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000178  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00017c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000180  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000184  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000188  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00018c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000190  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000194  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000198  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00019c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001a0  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001a4  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001a8  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001ac  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001b0  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001b4  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001b8  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0001bc  0a0d0000          DCB      0x0a,0x0d,0x00,0x00
                  WriteBlock
                          DCD      0x20000000
                  ReadBlock
                          DCD      0x200003e8

;*** Start embedded assembler ***

#line 1 "..\\Mci_ReadWrite.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_Mci_ReadWrite_c_3cc7bf43____REV16|
#line 115 "..\\..\\..\\..\\Core\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_Mci_ReadWrite_c_3cc7bf43____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_Mci_ReadWrite_c_3cc7bf43____REVSH|
#line 129
|__asm___15_Mci_ReadWrite_c_3cc7bf43____REVSH| PROC
#line 130

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
