; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o".\FLASH M4\debug_frmwrk.o" --asm_dir=".\FLASH M4\\" --list_dir=".\FLASH M4\\" --depend=".\FLASH M4\debug_frmwrk.d" --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\Core\CM3\DeviceSupport\NXP\LPC17xx -I..\..\..\..\Drivers\include -I..\..\..\..\BoardSupport -I..\..\..\..\Core\CMSIS\Include -I..\..\..\..\Core\Device\NXP\LPC407x_8x_177x_8x\Include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC407x_8x_177x_8x -D__MICROLIB -DCORE_M4 --omf_browse=".\FLASH M4\debug_frmwrk.crf" ..\..\..\..\Drivers\source\debug_frmwrk.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UARTPutChar PROC
;;;65      **********************************************************************/
;;;66     void UARTPutChar (UART_ID_Type UartID, uint8_t ch)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;67     {
000002  4604              MOV      r4,r0
;;;68     	UART_Send(UartID, &ch, 1, BLOCKING);
000004  2301              MOVS     r3,#1
000006  461a              MOV      r2,r3
000008  a901              ADD      r1,sp,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       UART_Send
;;;69     }
000010  bd1c              POP      {r2-r4,pc}
;;;70     
                          ENDP

                  UARTGetChar PROC
;;;76      **********************************************************************/
;;;77     uint8_t UARTGetChar (UART_ID_Type UartID)
000012  b538              PUSH     {r3-r5,lr}
;;;78     {
000014  4604              MOV      r4,r0
;;;79     	uint8_t tmp = 0;
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
;;;80     
;;;81     	UART_Receive(UartID, &tmp, 1, BLOCKING);
00001a  2301              MOVS     r3,#1
00001c  461a              MOV      r2,r3
00001e  4669              MOV      r1,sp
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       UART_Receive
;;;82     
;;;83     	return(tmp);
000026  f89d0000          LDRB     r0,[sp,#0]
;;;84     }
00002a  bd38              POP      {r3-r5,pc}
;;;85     /*********************************************************************//**
                          ENDP

                  UARTGetCharInNonBlock PROC
;;;91     
;;;92     Bool UARTGetCharInNonBlock(UART_ID_Type UartID, uint8_t* c)
00002c  b570              PUSH     {r4-r6,lr}
;;;93     {	
00002e  4605              MOV      r5,r0
000030  460c              MOV      r4,r1
;;;94         if(c == NULL)
000032  b90c              CBNZ     r4,|L1.56|
;;;95             return FALSE;		
000034  2000              MOVS     r0,#0
                  |L1.54|
;;;96         if(UART_Receive(UartID, c, 1, NONE_BLOCKING))
;;;97             return TRUE;	
;;;98         return FALSE;
;;;99     }
000036  bd70              POP      {r4-r6,pc}
                  |L1.56|
000038  2300              MOVS     r3,#0                 ;96
00003a  2201              MOVS     r2,#1                 ;96
00003c  4621              MOV      r1,r4                 ;96
00003e  4628              MOV      r0,r5                 ;96
000040  f7fffffe          BL       UART_Receive
000044  b108              CBZ      r0,|L1.74|
000046  2001              MOVS     r0,#1                 ;97
000048  e7f5              B        |L1.54|
                  |L1.74|
00004a  2000              MOVS     r0,#0                 ;98
00004c  e7f3              B        |L1.54|
;;;100    
                          ENDP

                  UARTPuts PROC
;;;264     **********************************************************************/
;;;265    void UARTPuts(UART_ID_Type UartID, const void *str)
00004e  b570              PUSH     {r4-r6,lr}
;;;266    {
000050  4606              MOV      r6,r0
000052  460d              MOV      r5,r1
;;;267    	uint8_t *s = (uint8_t *) str;
000054  462c              MOV      r4,r5
;;;268    
;;;269    	while (*s)
000056  e004              B        |L1.98|
                  |L1.88|
;;;270    	{
;;;271    		UARTPutChar(UartID, *s++);
000058  f8141b01          LDRB     r1,[r4],#1
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       UARTPutChar
                  |L1.98|
000062  7820              LDRB     r0,[r4,#0]            ;269
000064  2800              CMP      r0,#0                 ;269
000066  d1f7              BNE      |L1.88|
;;;272    	}
;;;273    }
000068  bd70              POP      {r4-r6,pc}
;;;274    
                          ENDP

                  UARTGetValue PROC
;;;106     **********************************************************************/
;;;107    uint8_t UARTGetValue (UART_ID_Type UartID, uint8_t option,
00006a  e92d4fff          PUSH     {r0-r11,lr}
;;;108    												uint8_t numCh, uint32_t* val)
;;;109    {
00006e  b083              SUB      sp,sp,#0xc
000070  460c              MOV      r4,r1
000072  4615              MOV      r5,r2
000074  461e              MOV      r6,r3
;;;110    	uint8_t tmpCh = 0, cnt, factor, isValidCh = FALSE;
000076  2000              MOVS     r0,#0
000078  9002              STR      r0,[sp,#8]
00007a  9001              STR      r0,[sp,#4]
;;;111    	uint32_t tmpVal, rVal, cntFailed, multiplier;
;;;112    
;;;113    	//it does not get any value
;;;114    	if(numCh <= 0)
00007c  2d00              CMP      r5,#0
00007e  dc03              BGT      |L1.136|
;;;115    	{
;;;116    		*val = 0;
000080  6030              STR      r0,[r6,#0]
                  |L1.130|
;;;117    		return 0;
;;;118    	}
;;;119    
;;;120    	cntFailed = 0;
;;;121    
;;;122    	// To store the multiplier of Decimal (10) or Heximal (16)
;;;123    	factor = (option == DBG_GETVAL_IN_HEX) ? 16 : ((option == DBG_GETVAL_IN_DEC) ? 10 : 0);
;;;124    
;;;125    	if (factor == 0)
;;;126    	{
;;;127    		*val = 0;
;;;128    
;;;129    		return 0;
;;;130    	}
;;;131    
;;;132    	rVal = 0;
;;;133    
;;;134    	while (numCh > 0)
;;;135    	{
;;;136    		isValidCh = TRUE;
;;;137    
;;;138    		UART_Receive(UartID, &tmpCh, 1, BLOCKING);
;;;139    
;;;140    		if((tmpCh >= '0') && (tmpCh<= '9'))
;;;141    		{
;;;142    			tmpVal = (uint32_t) (tmpCh - '0');
;;;143    		}
;;;144    		else if (option == DBG_GETVAL_IN_HEX)
;;;145    		{
;;;146    			factor = 16;
;;;147    
;;;148    			switch (tmpCh)
;;;149    			{
;;;150    				case 'a':
;;;151    
;;;152    				case 'A':
;;;153    					tmpVal = 10;
;;;154    
;;;155    					break;
;;;156    
;;;157    				case 'b':
;;;158    
;;;159    				case 'B':
;;;160    					tmpVal = 11;
;;;161    
;;;162    					break;
;;;163    
;;;164    				case 'c':
;;;165    
;;;166    				case 'C':
;;;167    					tmpVal = 12;
;;;168    
;;;169    					break;
;;;170    
;;;171    				case 'd':
;;;172    
;;;173    				case 'D':
;;;174    					tmpVal = 13;
;;;175    
;;;176    					break;
;;;177    
;;;178    				case 'e':
;;;179    
;;;180    				case 'E':
;;;181    					tmpVal = 14;
;;;182    
;;;183    					break;
;;;184    
;;;185    				case 'f':
;;;186    
;;;187    				case 'F':
;;;188    					tmpVal = 15;
;;;189    
;;;190    					break;
;;;191    
;;;192    				default:
;;;193    					isValidCh = FALSE;
;;;194    					break;
;;;195    			}
;;;196    		}
;;;197    		else
;;;198    		{
;;;199    			isValidCh = FALSE;
;;;200    		}
;;;201    
;;;202    		multiplier = 1;
;;;203    
;;;204    		if(isValidCh == FALSE)
;;;205    		{
;;;206    			if(option == DBG_GETVAL_IN_DEC)
;;;207    			{
;;;208    				UARTPuts(UartID, "Please enter a char from '0' to '9'!!!\r\n");
;;;209    			}
;;;210    			else if (option == DBG_GETVAL_IN_HEX)
;;;211    			{
;;;212    				UARTPuts(UartID, "Please enter a char from '0' to '9', and 'a/A', 'b/B', c/C', 'd/D', 'e/E' and 'f/F'!!!\r\n");
;;;213    			}
;;;214    
;;;215    			cntFailed ++;
;;;216    
;;;217    			if(cntFailed >= NUM_SKIPPED_ALLOWED)
;;;218    			{
;;;219    				UARTPuts(UartID, "Reach limitation of re-tries. Return FAILED\r\n");
;;;220    
;;;221    				//it's failed, should return
;;;222    				return 0;
;;;223    			}
;;;224    		}
;;;225    		else
;;;226    		{
;;;227    			//Echo the character to the terminal
;;;228    			UARTPutChar(UartID, tmpCh);
;;;229    
;;;230    			if(numCh == 1)
;;;231    			{
;;;232    				factor = 1;
;;;233    				multiplier = 1;
;;;234    			}
;;;235    			else
;;;236    			{
;;;237    				for(cnt = 1; cnt < numCh; cnt++)
;;;238    				{
;;;239    					multiplier *= factor;
;;;240    				}
;;;241    			}
;;;242    
;;;243    			tmpVal *= multiplier;
;;;244    
;;;245    			//Update the value return
;;;246    			rVal += tmpVal;
;;;247    
;;;248    			numCh --;
;;;249    		}
;;;250    	}
;;;251    
;;;252    	*val = rVal;
;;;253    
;;;254    	return(1);
;;;255    }
000082  b007              ADD      sp,sp,#0x1c
000084  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.136|
000088  f04f0800          MOV      r8,#0                 ;120
00008c  2c01              CMP      r4,#1                 ;123
00008e  d101              BNE      |L1.148|
000090  2010              MOVS     r0,#0x10              ;123
000092  e003              B        |L1.156|
                  |L1.148|
000094  b90c              CBNZ     r4,|L1.154|
000096  200a              MOVS     r0,#0xa               ;123
000098  e000              B        |L1.156|
                  |L1.154|
00009a  2000              MOVS     r0,#0                 ;123
                  |L1.156|
00009c  4682              MOV      r10,r0                ;123
00009e  f1ba0f00          CMP      r10,#0                ;125
0000a2  d102              BNE      |L1.170|
0000a4  2000              MOVS     r0,#0                 ;127
0000a6  6030              STR      r0,[r6,#0]            ;127
0000a8  e7eb              B        |L1.130|
                  |L1.170|
0000aa  2700              MOVS     r7,#0                 ;132
0000ac  e085              B        |L1.442|
                  |L1.174|
0000ae  2001              MOVS     r0,#1                 ;136
0000b0  9001              STR      r0,[sp,#4]            ;136
0000b2  2301              MOVS     r3,#1                 ;138
0000b4  461a              MOV      r2,r3                 ;138
0000b6  a902              ADD      r1,sp,#8              ;138
0000b8  9803              LDR      r0,[sp,#0xc]          ;138
0000ba  f7fffffe          BL       UART_Receive
0000be  f89d0008          LDRB     r0,[sp,#8]            ;140
0000c2  2830              CMP      r0,#0x30              ;140
0000c4  db08              BLT      |L1.216|
0000c6  f89d0008          LDRB     r0,[sp,#8]            ;140
0000ca  2839              CMP      r0,#0x39              ;140
0000cc  dc04              BGT      |L1.216|
0000ce  f89d0008          LDRB     r0,[sp,#8]            ;142
0000d2  f1a00b30          SUB      r11,r0,#0x30          ;142
0000d6  e037              B        |L1.328|
                  |L1.216|
0000d8  2c01              CMP      r4,#1                 ;144
0000da  d133              BNE      |L1.324|
0000dc  f04f0a10          MOV      r10,#0x10             ;146
0000e0  f89d0008          LDRB     r0,[sp,#8]            ;148
0000e4  2861              CMP      r0,#0x61              ;148
0000e6  d011              BEQ      |L1.268|
0000e8  dc08              BGT      |L1.252|
0000ea  f1a00041          SUB      r0,r0,#0x41           ;148
0000ee  2806              CMP      r0,#6                 ;148
0000f0  d224              BCS      |L1.316|
0000f2  e8dff000          TBB      [pc,r0]               ;148
0000f6  0c10              DCB      0x0c,0x10
0000f8  14181c20          DCB      0x14,0x18,0x1c,0x20
                  |L1.252|
0000fc  3862              SUBS     r0,r0,#0x62           ;148
0000fe  2805              CMP      r0,#5                 ;148
000100  d21c              BCS      |L1.316|
000102  e8dff000          TBB      [pc,r0]               ;148
000106  070b              DCB      0x07,0x0b
000108  0f131700          DCB      0x0f,0x13,0x17,0x00
                  |L1.268|
00010c  bf00              NOP                            ;152
00010e  f04f0b0a          MOV      r11,#0xa              ;153
000112  e016              B        |L1.322|
000114  bf00              NOP                            ;159
000116  f04f0b0b          MOV      r11,#0xb              ;160
00011a  e012              B        |L1.322|
00011c  bf00              NOP                            ;166
00011e  f04f0b0c          MOV      r11,#0xc              ;167
000122  e00e              B        |L1.322|
000124  bf00              NOP                            ;173
000126  f04f0b0d          MOV      r11,#0xd              ;174
00012a  e00a              B        |L1.322|
00012c  bf00              NOP                            ;180
00012e  f04f0b0e          MOV      r11,#0xe              ;181
000132  e006              B        |L1.322|
000134  bf00              NOP                            ;187
000136  f04f0b0f          MOV      r11,#0xf              ;188
00013a  e002              B        |L1.322|
                  |L1.316|
00013c  2000              MOVS     r0,#0                 ;193
00013e  9001              STR      r0,[sp,#4]            ;193
000140  bf00              NOP                            ;194
                  |L1.322|
000142  e001              B        |L1.328|
                  |L1.324|
000144  2000              MOVS     r0,#0                 ;199
000146  9001              STR      r0,[sp,#4]            ;199
                  |L1.328|
000148  2001              MOVS     r0,#1                 ;202
00014a  9000              STR      r0,[sp,#0]            ;202
00014c  9801              LDR      r0,[sp,#4]            ;204
00014e  b9b0              CBNZ     r0,|L1.382|
000150  b924              CBNZ     r4,|L1.348|
000152  a1f4              ADR      r1,|L1.1316|
000154  9803              LDR      r0,[sp,#0xc]          ;208
000156  f7fffffe          BL       UARTPuts
00015a  e005              B        |L1.360|
                  |L1.348|
00015c  2c01              CMP      r4,#1                 ;210
00015e  d103              BNE      |L1.360|
000160  49fb              LDR      r1,|L1.1360|
000162  9803              LDR      r0,[sp,#0xc]          ;212
000164  f7fffffe          BL       UARTPuts
                  |L1.360|
000168  f1080801          ADD      r8,r8,#1              ;215
00016c  f1b80f0a          CMP      r8,#0xa               ;217
000170  d323              BCC      |L1.442|
000172  a1f8              ADR      r1,|L1.1364|
000174  9803              LDR      r0,[sp,#0xc]          ;219
000176  f7fffffe          BL       UARTPuts
00017a  2000              MOVS     r0,#0                 ;222
00017c  e781              B        |L1.130|
                  |L1.382|
00017e  f89d1008          LDRB     r1,[sp,#8]            ;228
000182  9803              LDR      r0,[sp,#0xc]          ;228
000184  f7fffffe          BL       UARTPutChar
000188  2d01              CMP      r5,#1                 ;230
00018a  d103              BNE      |L1.404|
00018c  46aa              MOV      r10,r5                ;232
00018e  2001              MOVS     r0,#1                 ;233
000190  9000              STR      r0,[sp,#0]            ;233
000192  e00c              B        |L1.430|
                  |L1.404|
000194  f04f0901          MOV      r9,#1                 ;237
000198  e007              B        |L1.426|
                  |L1.410|
00019a  9800              LDR      r0,[sp,#0]            ;239
00019c  fb00f00a          MUL      r0,r0,r10             ;239
0001a0  9000              STR      r0,[sp,#0]            ;239
0001a2  f1090001          ADD      r0,r9,#1              ;237
0001a6  f00009ff          AND      r9,r0,#0xff           ;237
                  |L1.426|
0001aa  45a9              CMP      r9,r5                 ;237
0001ac  dbf5              BLT      |L1.410|
                  |L1.430|
0001ae  9800              LDR      r0,[sp,#0]            ;243
0001b0  fb0bfb00          MUL      r11,r11,r0            ;243
0001b4  445f              ADD      r7,r7,r11             ;246
0001b6  1e68              SUBS     r0,r5,#1              ;248
0001b8  b2c5              UXTB     r5,r0                 ;248
                  |L1.442|
0001ba  2d00              CMP      r5,#0                 ;134
0001bc  f73faf77          BGT      |L1.174|
0001c0  6037              STR      r7,[r6,#0]            ;252
0001c2  2001              MOVS     r0,#1                 ;254
0001c4  e75d              B        |L1.130|
;;;256    
                          ENDP

                  UARTPuts_ PROC
;;;281     **********************************************************************/
;;;282    void UARTPuts_(UART_ID_Type UartID, const void *str)
0001c6  b570              PUSH     {r4-r6,lr}
;;;283    {
0001c8  4604              MOV      r4,r0
0001ca  460d              MOV      r5,r1
;;;284    	UARTPuts (UartID, str);
0001cc  4629              MOV      r1,r5
0001ce  4620              MOV      r0,r4
0001d0  f7fffffe          BL       UARTPuts
;;;285    	UARTPuts (UartID, "\n\r");
0001d4  a1eb              ADR      r1,|L1.1412|
0001d6  4620              MOV      r0,r4
0001d8  f7fffffe          BL       UARTPuts
;;;286    }
0001dc  bd70              POP      {r4-r6,pc}
;;;287    
                          ENDP

                  UARTPutDec PROC
;;;294     **********************************************************************/
;;;295    void UARTPutDec(UART_ID_Type UartID, uint8_t decnum)
0001de  e92d41f0          PUSH     {r4-r8,lr}
;;;296    {
0001e2  4680              MOV      r8,r0
0001e4  460c              MOV      r4,r1
;;;297    	uint8_t c1=decnum%10;
0001e6  200a              MOVS     r0,#0xa
0001e8  fb94f1f0          SDIV     r1,r4,r0
0001ec  fb004011          MLS      r0,r0,r1,r4
0001f0  b2c5              UXTB     r5,r0
;;;298    	uint8_t c2=(decnum/10)%10;
0001f2  200a              MOVS     r0,#0xa
0001f4  fb94f0f0          SDIV     r0,r4,r0
0001f8  210a              MOVS     r1,#0xa
0001fa  fb90f2f1          SDIV     r2,r0,r1
0001fe  fb010012          MLS      r0,r1,r2,r0
000202  b2c6              UXTB     r6,r0
;;;299    	uint8_t c3=(decnum/100)%10;
000204  2064              MOVS     r0,#0x64
000206  fb94f0f0          SDIV     r0,r4,r0
00020a  fb90f2f1          SDIV     r2,r0,r1
00020e  fb010012          MLS      r0,r1,r2,r0
000212  b2c7              UXTB     r7,r0
;;;300    	UARTPutChar(UartID, '0'+c3);
000214  f1070030          ADD      r0,r7,#0x30
000218  b2c1              UXTB     r1,r0
00021a  4640              MOV      r0,r8
00021c  f7fffffe          BL       UARTPutChar
;;;301    	UARTPutChar(UartID, '0'+c2);
000220  f1060030          ADD      r0,r6,#0x30
000224  b2c1              UXTB     r1,r0
000226  4640              MOV      r0,r8
000228  f7fffffe          BL       UARTPutChar
;;;302    	UARTPutChar(UartID, '0'+c1);
00022c  f1050030          ADD      r0,r5,#0x30
000230  b2c1              UXTB     r1,r0
000232  4640              MOV      r0,r8
000234  f7fffffe          BL       UARTPutChar
;;;303    }
000238  e8bd81f0          POP      {r4-r8,pc}
;;;304    
                          ENDP

                  UARTPutDec16 PROC
;;;310     **********************************************************************/
;;;311    void UARTPutDec16(UART_ID_Type UartID, uint16_t decnum)
00023c  e92d47f0          PUSH     {r4-r10,lr}
;;;312    {
000240  4682              MOV      r10,r0
000242  460c              MOV      r4,r1
;;;313    	uint8_t c1=decnum%10;
000244  200a              MOVS     r0,#0xa
000246  fb94f1f0          SDIV     r1,r4,r0
00024a  fb004011          MLS      r0,r0,r1,r4
00024e  b2c5              UXTB     r5,r0
;;;314    	uint8_t c2=(decnum/10)%10;
000250  200a              MOVS     r0,#0xa
000252  fb94f0f0          SDIV     r0,r4,r0
000256  210a              MOVS     r1,#0xa
000258  fb90f2f1          SDIV     r2,r0,r1
00025c  fb010012          MLS      r0,r1,r2,r0
000260  b2c6              UXTB     r6,r0
;;;315    	uint8_t c3=(decnum/100)%10;
000262  2064              MOVS     r0,#0x64
000264  fb94f0f0          SDIV     r0,r4,r0
000268  fb90f2f1          SDIV     r2,r0,r1
00026c  fb010012          MLS      r0,r1,r2,r0
000270  b2c7              UXTB     r7,r0
;;;316    	uint8_t c4=(decnum/1000)%10;
000272  f44f707a          MOV      r0,#0x3e8
000276  fb94f0f0          SDIV     r0,r4,r0
00027a  fb90f2f1          SDIV     r2,r0,r1
00027e  fb010012          MLS      r0,r1,r2,r0
000282  f00008ff          AND      r8,r0,#0xff
;;;317    	uint8_t c5=(decnum/10000)%10;
000286  f2427010          MOV      r0,#0x2710
00028a  fb94f0f0          SDIV     r0,r4,r0
00028e  fb90f2f1          SDIV     r2,r0,r1
000292  fb010012          MLS      r0,r1,r2,r0
000296  f00009ff          AND      r9,r0,#0xff
;;;318    	UARTPutChar(UartID, '0'+c5);
00029a  f1090030          ADD      r0,r9,#0x30
00029e  b2c1              UXTB     r1,r0
0002a0  4650              MOV      r0,r10
0002a2  f7fffffe          BL       UARTPutChar
;;;319    	UARTPutChar(UartID, '0'+c4);
0002a6  f1080030          ADD      r0,r8,#0x30
0002aa  b2c1              UXTB     r1,r0
0002ac  4650              MOV      r0,r10
0002ae  f7fffffe          BL       UARTPutChar
;;;320    	UARTPutChar(UartID, '0'+c3);
0002b2  f1070030          ADD      r0,r7,#0x30
0002b6  b2c1              UXTB     r1,r0
0002b8  4650              MOV      r0,r10
0002ba  f7fffffe          BL       UARTPutChar
;;;321    	UARTPutChar(UartID, '0'+c2);
0002be  f1060030          ADD      r0,r6,#0x30
0002c2  b2c1              UXTB     r1,r0
0002c4  4650              MOV      r0,r10
0002c6  f7fffffe          BL       UARTPutChar
;;;322    	UARTPutChar(UartID, '0'+c1);
0002ca  f1050030          ADD      r0,r5,#0x30
0002ce  b2c1              UXTB     r1,r0
0002d0  4650              MOV      r0,r10
0002d2  f7fffffe          BL       UARTPutChar
;;;323    }
0002d6  e8bd87f0          POP      {r4-r10,pc}
;;;324    
                          ENDP

                  UARTPutDec32 PROC
;;;330     **********************************************************************/
;;;331    void UARTPutDec32(UART_ID_Type UartID, uint32_t decnum)
0002da  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;332    {
0002de  b083              SUB      sp,sp,#0xc
0002e0  460c              MOV      r4,r1
;;;333    	uint8_t c1=decnum%10;
0002e2  200a              MOVS     r0,#0xa
0002e4  fbb4f1f0          UDIV     r1,r4,r0
0002e8  fb004511          MLS      r5,r0,r1,r4
;;;334    	uint8_t c2=(decnum/10)%10;
0002ec  fbb4f0f0          UDIV     r0,r4,r0
0002f0  210a              MOVS     r1,#0xa
0002f2  fbb0f2f1          UDIV     r2,r0,r1
0002f6  fb010612          MLS      r6,r1,r2,r0
;;;335    	uint8_t c3=(decnum/100)%10;
0002fa  2064              MOVS     r0,#0x64
0002fc  fbb4f0f0          UDIV     r0,r4,r0
000300  fbb0f2f1          UDIV     r2,r0,r1
000304  fb010712          MLS      r7,r1,r2,r0
;;;336    	uint8_t c4=(decnum/1000)%10;
000308  f44f707a          MOV      r0,#0x3e8
00030c  fbb4f0f0          UDIV     r0,r4,r0
000310  fbb0f2f1          UDIV     r2,r0,r1
000314  fb010812          MLS      r8,r1,r2,r0
;;;337    	uint8_t c5=(decnum/10000)%10;
000318  f2427010          MOV      r0,#0x2710
00031c  fbb4f0f0          UDIV     r0,r4,r0
000320  fbb0f2f1          UDIV     r2,r0,r1
000324  fb010912          MLS      r9,r1,r2,r0
;;;338    	uint8_t c6=(decnum/100000)%10;
000328  4897              LDR      r0,|L1.1416|
00032a  fbb4f0f0          UDIV     r0,r4,r0
00032e  fbb0f2f1          UDIV     r2,r0,r1
000332  fb010a12          MLS      r10,r1,r2,r0
;;;339    	uint8_t c7=(decnum/1000000)%10;
000336  4895              LDR      r0,|L1.1420|
000338  fbb4f0f0          UDIV     r0,r4,r0
00033c  fbb0f2f1          UDIV     r2,r0,r1
000340  fb010b12          MLS      r11,r1,r2,r0
;;;340    	uint8_t c8=(decnum/10000000)%10;
000344  4892              LDR      r0,|L1.1424|
000346  fbb4f0f0          UDIV     r0,r4,r0
00034a  fbb0f2f1          UDIV     r2,r0,r1
00034e  fb010012          MLS      r0,r1,r2,r0
000352  9002              STR      r0,[sp,#8]
;;;341    	uint8_t c9=(decnum/100000000)%10;
000354  488f              LDR      r0,|L1.1428|
000356  fbb4f0f0          UDIV     r0,r4,r0
00035a  fbb0f2f1          UDIV     r2,r0,r1
00035e  fb010012          MLS      r0,r1,r2,r0
000362  9001              STR      r0,[sp,#4]
;;;342    	uint8_t c10=(decnum/1000000000)%10;
000364  488c              LDR      r0,|L1.1432|
000366  fbb4f0f0          UDIV     r0,r4,r0
00036a  fbb0f2f1          UDIV     r2,r0,r1
00036e  fb010012          MLS      r0,r1,r2,r0
000372  9000              STR      r0,[sp,#0]
;;;343    	UARTPutChar(UartID, '0'+c10);
000374  9800              LDR      r0,[sp,#0]
000376  3030              ADDS     r0,r0,#0x30
000378  b2c1              UXTB     r1,r0
00037a  9803              LDR      r0,[sp,#0xc]
00037c  f7fffffe          BL       UARTPutChar
;;;344    	UARTPutChar(UartID, '0'+c9);
000380  9801              LDR      r0,[sp,#4]
000382  3030              ADDS     r0,r0,#0x30
000384  b2c1              UXTB     r1,r0
000386  9803              LDR      r0,[sp,#0xc]
000388  f7fffffe          BL       UARTPutChar
;;;345    	UARTPutChar(UartID, '0'+c8);
00038c  9802              LDR      r0,[sp,#8]
00038e  3030              ADDS     r0,r0,#0x30
000390  b2c1              UXTB     r1,r0
000392  9803              LDR      r0,[sp,#0xc]
000394  f7fffffe          BL       UARTPutChar
;;;346    	UARTPutChar(UartID, '0'+c7);
000398  f10b0030          ADD      r0,r11,#0x30
00039c  b2c1              UXTB     r1,r0
00039e  9803              LDR      r0,[sp,#0xc]
0003a0  f7fffffe          BL       UARTPutChar
;;;347    	UARTPutChar(UartID, '0'+c6);
0003a4  f10a0030          ADD      r0,r10,#0x30
0003a8  b2c1              UXTB     r1,r0
0003aa  9803              LDR      r0,[sp,#0xc]
0003ac  f7fffffe          BL       UARTPutChar
;;;348    	UARTPutChar(UartID, '0'+c5);
0003b0  f1090030          ADD      r0,r9,#0x30
0003b4  b2c1              UXTB     r1,r0
0003b6  9803              LDR      r0,[sp,#0xc]
0003b8  f7fffffe          BL       UARTPutChar
;;;349    	UARTPutChar(UartID, '0'+c4);
0003bc  f1080030          ADD      r0,r8,#0x30
0003c0  b2c1              UXTB     r1,r0
0003c2  9803              LDR      r0,[sp,#0xc]
0003c4  f7fffffe          BL       UARTPutChar
;;;350    	UARTPutChar(UartID, '0'+c3);
0003c8  f1070030          ADD      r0,r7,#0x30
0003cc  b2c1              UXTB     r1,r0
0003ce  9803              LDR      r0,[sp,#0xc]
0003d0  f7fffffe          BL       UARTPutChar
;;;351    	UARTPutChar(UartID, '0'+c2);
0003d4  f1060030          ADD      r0,r6,#0x30
0003d8  b2c1              UXTB     r1,r0
0003da  9803              LDR      r0,[sp,#0xc]
0003dc  f7fffffe          BL       UARTPutChar
;;;352    	UARTPutChar(UartID, '0'+c1);
0003e0  f1050030          ADD      r0,r5,#0x30
0003e4  b2c1              UXTB     r1,r0
0003e6  9803              LDR      r0,[sp,#0xc]
0003e8  f7fffffe          BL       UARTPutChar
;;;353    }
0003ec  b005              ADD      sp,sp,#0x14
0003ee  e8bd8ff0          POP      {r4-r11,pc}
;;;354    
                          ENDP

                  UARTPutHex_ PROC
;;;360     **********************************************************************/
;;;361    void UARTPutHex_ (UART_ID_Type UartID, uint8_t hexnum)
0003f2  e92d41f0          PUSH     {r4-r8,lr}
;;;362    {
0003f6  4607              MOV      r7,r0
0003f8  460d              MOV      r5,r1
;;;363    	uint8_t nibble, i;
;;;364    
;;;365    	i = 1;
0003fa  2601              MOVS     r6,#1
;;;366    	do
0003fc  bf00              NOP      
                  |L1.1022|
;;;367    	{
;;;368    		nibble = (hexnum >> (4*i)) & 0x0F;
0003fe  00b0              LSLS     r0,r6,#2
000400  fa45f000          ASR      r0,r5,r0
000404  f000040f          AND      r4,r0,#0xf
;;;369    
;;;370    		UARTPutChar(UartID, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
000408  2c09              CMP      r4,#9
00040a  dd02              BLE      |L1.1042|
00040c  f1040037          ADD      r0,r4,#0x37
000410  e001              B        |L1.1046|
                  |L1.1042|
000412  f1040030          ADD      r0,r4,#0x30
                  |L1.1046|
000416  b2c1              UXTB     r1,r0
000418  4638              MOV      r0,r7
00041a  f7fffffe          BL       UARTPutChar
;;;371    	}
;;;372    	while (i--);
00041e  0030              MOVS     r0,r6
000420  f1a60101          SUB      r1,r6,#1
000424  b2ce              UXTB     r6,r1
000426  d1ea              BNE      |L1.1022|
;;;373    }
000428  e8bd81f0          POP      {r4-r8,pc}
;;;374    
                          ENDP

                  UARTPutHex PROC
;;;381     **********************************************************************/
;;;382    void UARTPutHex (UART_ID_Type UartID, uint8_t hexnum)
00042c  e92d41f0          PUSH     {r4-r8,lr}
;;;383    {
000430  4607              MOV      r7,r0
000432  460d              MOV      r5,r1
;;;384    	uint8_t nibble, i;
;;;385    
;;;386    	UARTPuts(UartID, "0x");
000434  a159              ADR      r1,|L1.1436|
000436  4638              MOV      r0,r7
000438  f7fffffe          BL       UARTPuts
;;;387    
;;;388    	i = 1;
00043c  2601              MOVS     r6,#1
;;;389    	do {
00043e  bf00              NOP      
                  |L1.1088|
;;;390    		nibble = (hexnum >> (4*i)) & 0x0F;
000440  00b0              LSLS     r0,r6,#2
000442  fa45f000          ASR      r0,r5,r0
000446  f000040f          AND      r4,r0,#0xf
;;;391    		UARTPutChar(UartID, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00044a  2c09              CMP      r4,#9
00044c  dd02              BLE      |L1.1108|
00044e  f1040037          ADD      r0,r4,#0x37
000452  e001              B        |L1.1112|
                  |L1.1108|
000454  f1040030          ADD      r0,r4,#0x30
                  |L1.1112|
000458  b2c1              UXTB     r1,r0
00045a  4638              MOV      r0,r7
00045c  f7fffffe          BL       UARTPutChar
;;;392    	} while (i--);
000460  0030              MOVS     r0,r6
000462  f1a60101          SUB      r1,r6,#1
000466  b2ce              UXTB     r6,r1
000468  d1ea              BNE      |L1.1088|
;;;393    }
00046a  e8bd81f0          POP      {r4-r8,pc}
;;;394    
                          ENDP

                  UARTPutHex16_ PROC
;;;401     **********************************************************************/
;;;402    void UARTPutHex16_ (UART_ID_Type UartID, uint16_t hexnum)
00046e  e92d41f0          PUSH     {r4-r8,lr}
;;;403    {
000472  4607              MOV      r7,r0
000474  460d              MOV      r5,r1
;;;404    	uint8_t nibble, i;
;;;405    
;;;406    	i = 3;
000476  2603              MOVS     r6,#3
;;;407    	do
000478  bf00              NOP      
                  |L1.1146|
;;;408    	{
;;;409    		nibble = (hexnum >> (4*i)) & 0x0F;
00047a  00b0              LSLS     r0,r6,#2
00047c  fa45f000          ASR      r0,r5,r0
000480  f000040f          AND      r4,r0,#0xf
;;;410    
;;;411    		UARTPutChar(UartID, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
000484  2c09              CMP      r4,#9
000486  dd02              BLE      |L1.1166|
000488  f1040037          ADD      r0,r4,#0x37
00048c  e001              B        |L1.1170|
                  |L1.1166|
00048e  f1040030          ADD      r0,r4,#0x30
                  |L1.1170|
000492  b2c1              UXTB     r1,r0
000494  4638              MOV      r0,r7
000496  f7fffffe          BL       UARTPutChar
;;;412    	}
;;;413    	while (i--);
00049a  0030              MOVS     r0,r6
00049c  f1a60101          SUB      r1,r6,#1
0004a0  b2ce              UXTB     r6,r1
0004a2  d1ea              BNE      |L1.1146|
;;;414    }
0004a4  e8bd81f0          POP      {r4-r8,pc}
;;;415    
                          ENDP

                  UARTPutHex16 PROC
;;;422     **********************************************************************/
;;;423    void UARTPutHex16 (UART_ID_Type UartID, uint16_t hexnum)
0004a8  e92d41f0          PUSH     {r4-r8,lr}
;;;424    {
0004ac  4607              MOV      r7,r0
0004ae  460d              MOV      r5,r1
;;;425    	uint8_t nibble, i;
;;;426    
;;;427    	UARTPuts(UartID, "0x");
0004b0  a13a              ADR      r1,|L1.1436|
0004b2  4638              MOV      r0,r7
0004b4  f7fffffe          BL       UARTPuts
;;;428    
;;;429    	i = 3;
0004b8  2603              MOVS     r6,#3
;;;430    	do
0004ba  bf00              NOP      
                  |L1.1212|
;;;431    	{
;;;432    		nibble = (hexnum >> (4*i)) & 0x0F;
0004bc  00b0              LSLS     r0,r6,#2
0004be  fa45f000          ASR      r0,r5,r0
0004c2  f000040f          AND      r4,r0,#0xf
;;;433    
;;;434    		UARTPutChar(UartID, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
0004c6  2c09              CMP      r4,#9
0004c8  dd02              BLE      |L1.1232|
0004ca  f1040037          ADD      r0,r4,#0x37
0004ce  e001              B        |L1.1236|
                  |L1.1232|
0004d0  f1040030          ADD      r0,r4,#0x30
                  |L1.1236|
0004d4  b2c1              UXTB     r1,r0
0004d6  4638              MOV      r0,r7
0004d8  f7fffffe          BL       UARTPutChar
;;;435    	}
;;;436    	while (i--);
0004dc  0030              MOVS     r0,r6
0004de  f1a60101          SUB      r1,r6,#1
0004e2  b2ce              UXTB     r6,r1
0004e4  d1ea              BNE      |L1.1212|
;;;437    }
0004e6  e8bd81f0          POP      {r4-r8,pc}
;;;438    
                          ENDP

                  UARTPutHex32_ PROC
;;;444     **********************************************************************/
;;;445    void UARTPutHex32_ (UART_ID_Type UartID, uint32_t hexnum)
0004ea  e92d41f0          PUSH     {r4-r8,lr}
;;;446    {
0004ee  4607              MOV      r7,r0
0004f0  460d              MOV      r5,r1
;;;447    	uint8_t nibble, i;
;;;448    
;;;449    	i = 7;
0004f2  2607              MOVS     r6,#7
;;;450    	do
0004f4  bf00              NOP      
                  |L1.1270|
;;;451    	{
;;;452    		nibble = (hexnum >> (4*i)) & 0x0F;
0004f6  00b0              LSLS     r0,r6,#2
0004f8  fa25f000          LSR      r0,r5,r0
0004fc  f000040f          AND      r4,r0,#0xf
;;;453    
;;;454    		UARTPutChar(UartID, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
000500  2c09              CMP      r4,#9
000502  dd02              BLE      |L1.1290|
000504  f1040037          ADD      r0,r4,#0x37
000508  e001              B        |L1.1294|
                  |L1.1290|
00050a  f1040030          ADD      r0,r4,#0x30
                  |L1.1294|
00050e  b2c1              UXTB     r1,r0
000510  4638              MOV      r0,r7
000512  f7fffffe          BL       UARTPutChar
;;;455    	}
;;;456    	while (i--);
000516  0030              MOVS     r0,r6
000518  f1a60101          SUB      r1,r6,#1
00051c  b2ce              UXTB     r6,r1
00051e  d1ea              BNE      |L1.1270|
;;;457    }
000520  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1316|
000524  506c6561          DCB      "Please enter a char from '0' to '9'!!!\r\n",0
000528  73652065
00052c  6e746572
000530  20612063
000534  68617220
000538  66726f6d
00053c  20273027
000540  20746f20
000544  27392721
000548  21210d0a
00054c  00      
00054d  00                DCB      0
00054e  00                DCB      0
00054f  00                DCB      0
                  |L1.1360|
                          DCD      ||.constdata||
                  |L1.1364|
000554  52656163          DCB      "Reach limitation of re-tries. Return FAILED\r\n",0
000558  68206c69
00055c  6d697461
000560  74696f6e
000564  206f6620
000568  72652d74
00056c  72696573
000570  2e205265
000574  7475726e
000578  20464149
00057c  4c45440d
000580  0a00    
000582  00                DCB      0
000583  00                DCB      0
                  |L1.1412|
000584  0a0d00            DCB      "\n\r",0
000587  00                DCB      0
                  |L1.1416|
                          DCD      0x000186a0
                  |L1.1420|
                          DCD      0x000f4240
                  |L1.1424|
                          DCD      0x00989680
                  |L1.1428|
                          DCD      0x05f5e100
                  |L1.1432|
                          DCD      0x3b9aca00
                  |L1.1436|
00059c  307800            DCB      "0x",0
00059f  00                DCB      0
                          ENDP

                  UARTPutHex32 PROC
;;;465     **********************************************************************/
;;;466    void UARTPutHex32 (UART_ID_Type UartID, uint32_t hexnum)
0005a0  e92d41f0          PUSH     {r4-r8,lr}
;;;467    {
0005a4  4607              MOV      r7,r0
0005a6  460d              MOV      r5,r1
;;;468    	uint8_t nibble, i;
;;;469    
;;;470    	UARTPuts(UartID, "0x");
0005a8  f2af0110          ADR      r1,|L1.1436|
0005ac  4638              MOV      r0,r7
0005ae  f7fffffe          BL       UARTPuts
;;;471    
;;;472    	i = 7;
0005b2  2607              MOVS     r6,#7
;;;473    	do
0005b4  bf00              NOP      
                  |L1.1462|
;;;474    	{
;;;475    		nibble = (hexnum >> (4*i)) & 0x0F;
0005b6  00b0              LSLS     r0,r6,#2
0005b8  fa25f000          LSR      r0,r5,r0
0005bc  f000040f          AND      r4,r0,#0xf
;;;476    
;;;477    		UARTPutChar(UartID, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
0005c0  2c09              CMP      r4,#9
0005c2  dd02              BLE      |L1.1482|
0005c4  f1040037          ADD      r0,r4,#0x37
0005c8  e001              B        |L1.1486|
                  |L1.1482|
0005ca  f1040030          ADD      r0,r4,#0x30
                  |L1.1486|
0005ce  b2c1              UXTB     r1,r0
0005d0  4638              MOV      r0,r7
0005d2  f7fffffe          BL       UARTPutChar
;;;478    	}
;;;479    	while (i--);
0005d6  0030              MOVS     r0,r6
0005d8  f1a60101          SUB      r1,r6,#1
0005dc  b2ce              UXTB     r6,r1
0005de  d1ea              BNE      |L1.1462|
;;;480    }
0005e0  e8bd81f0          POP      {r4-r8,pc}
;;;481    
                          ENDP

                  debug_frmwrk_init PROC
;;;504     **********************************************************************/
;;;505    void debug_frmwrk_init(void)
0005e4  b51c              PUSH     {r2-r4,lr}
;;;506    {
;;;507    	UART_CFG_Type UARTConfigStruct;
;;;508    
;;;509    #if (USED_UART_DEBUG_PORT == 0)
;;;510    	/*
;;;511    	 * Initialize UART0 pin connect
;;;512    	 * P0.2: TXD
;;;513    	 * P0.3: RXD
;;;514    	 */
;;;515    	PINSEL_ConfigPin (0, 2, 1);
0005e6  2201              MOVS     r2,#1
0005e8  2102              MOVS     r1,#2
0005ea  2000              MOVS     r0,#0
0005ec  f7fffffe          BL       PINSEL_ConfigPin
;;;516    	PINSEL_ConfigPin (0, 3, 1);
0005f0  2201              MOVS     r2,#1
0005f2  2103              MOVS     r1,#3
0005f4  2000              MOVS     r0,#0
0005f6  f7fffffe          BL       PINSEL_ConfigPin
;;;517    #elif (USED_UART_DEBUG_PORT == 1)
;;;518    	/*
;;;519    	 * Initialize UART1 pin connect
;;;520    	 * P0.15: TXD
;;;521    	 * P0.16: RXD
;;;522    	 */
;;;523    	PINSEL_ConfigPin(0, 15, 1);
;;;524    	PINSEL_ConfigPin(0, 16, 1);
;;;525    #elif (USED_UART_DEBUG_PORT == 2)
;;;526    	/*
;;;527    	 * Initialize UART2 pin connect
;;;528    	 * P0.10: TXD
;;;529    	 * P0.11: RXD
;;;530    	 */
;;;531    	PINSEL_ConfigPin(0, 10, 1);
;;;532    	PINSEL_ConfigPin(0, 11, 1);
;;;533    #elif (USED_UART_DEBUG_PORT == 3)
;;;534    	/*
;;;535    	 * Initialize UART3 pin connect
;;;536    	 * P0.2: TXD
;;;537    	 * P0.3: RXD
;;;538    	 */
;;;539    	PINSEL_ConfigPin(0, 2, 2);
;;;540    	PINSEL_ConfigPin(0, 3, 2);
;;;541    #elif (USED_UART_DEBUG_PORT == 4)
;;;542    	/*
;;;543    	 * Initialize UART4 pin connect
;;;544    	 * P0.22: TXD
;;;545    	 * P2.9: RXD
;;;546    	 */
;;;547    	PINSEL_ConfigPin(0, 22, 3);
;;;548    	PINSEL_ConfigPin(2, 9, 3);
;;;549    
;;;550    #endif
;;;551    
;;;552    	/* Initialize UART Configuration parameter structure to default state:
;;;553    	 * Baudrate =115200 bps 
;;;554    	 * 8 data bit
;;;555    	 * 1 Stop bit
;;;556    	 * None parity
;;;557    	 */
;;;558    	UART_ConfigStructInit(&UARTConfigStruct);
0005fa  4668              MOV      r0,sp
0005fc  f7fffffe          BL       UART_ConfigStructInit
;;;559    
;;;560    	// Initialize DEBUG_UART_PORT peripheral with given to corresponding parameter
;;;561    	UART_Init(DEBUG_UART_PORT, &UARTConfigStruct);
000600  4669              MOV      r1,sp
000602  2000              MOVS     r0,#0
000604  f7fffffe          BL       UART_Init
;;;562    
;;;563    	// Enable UART Transmit
;;;564    	UART_TxCmd(DEBUG_UART_PORT, ENABLE);
000608  2101              MOVS     r1,#1
00060a  2000              MOVS     r0,#0
00060c  f7fffffe          BL       UART_TxCmd
;;;565    
;;;566    	_db_msg	= UARTPuts;
000610  f2af50c5          ADR      r0,UARTPuts + 1
000614  491d              LDR      r1,|L1.1676|
000616  6008              STR      r0,[r1,#0]  ; _db_msg
;;;567    	_db_msg_ = UARTPuts_;
000618  f2af4055          ADR      r0,UARTPuts_ + 1
00061c  491c              LDR      r1,|L1.1680|
00061e  6008              STR      r0,[r1,#0]  ; _db_msg_
;;;568    	_db_char = UARTPutChar;
000620  f2af6023          ADR      r0,UARTPutChar + 1
000624  491b              LDR      r1,|L1.1684|
000626  6008              STR      r0,[r1,#0]  ; _db_char
;;;569    	_db_hex = UARTPutHex;
000628  f2af10ff          ADR      r0,UARTPutHex + 1
00062c  491a              LDR      r1,|L1.1688|
00062e  6008              STR      r0,[r1,#0]  ; _db_hex
;;;570    	_db_hex_16 = UARTPutHex16;
000630  f2af108b          ADR      r0,UARTPutHex16 + 1
000634  4919              LDR      r1,|L1.1692|
000636  6008              STR      r0,[r1,#0]  ; _db_hex_16
;;;571    	_db_hex_32 = UARTPutHex32;
000638  f2af009b          ADR      r0,UARTPutHex32 + 1
00063c  4918              LDR      r1,|L1.1696|
00063e  6008              STR      r0,[r1,#0]  ; _db_hex_32
;;;572    	_db_hex_ = UARTPutHex_;
000640  f2af2051          ADR      r0,UARTPutHex_ + 1
000644  4917              LDR      r1,|L1.1700|
000646  6008              STR      r0,[r1,#0]  ; _db_hex_
;;;573    	_db_hex_16_ = UARTPutHex16_;
000648  f2af10dd          ADR      r0,UARTPutHex16_ + 1
00064c  4916              LDR      r1,|L1.1704|
00064e  6008              STR      r0,[r1,#0]  ; _db_hex_16_
;;;574    	_db_hex_32_ = UARTPutHex32_;
000650  f2af1069          ADR      r0,UARTPutHex32_ + 1
000654  4915              LDR      r1,|L1.1708|
000656  6008              STR      r0,[r1,#0]  ; _db_hex_32_
;;;575    	_db_dec = UARTPutDec;
000658  f2af407d          ADR      r0,UARTPutDec + 1
00065c  4914              LDR      r1,|L1.1712|
00065e  6008              STR      r0,[r1,#0]  ; _db_dec
;;;576    	_db_dec_16 = UARTPutDec16;
000660  f2af4027          ADR      r0,UARTPutDec16 + 1
000664  4913              LDR      r1,|L1.1716|
000666  6008              STR      r0,[r1,#0]  ; _db_dec_16
;;;577    	_db_dec_32 = UARTPutDec32;
000668  f2af3091          ADR      r0,UARTPutDec32 + 1
00066c  4912              LDR      r1,|L1.1720|
00066e  6008              STR      r0,[r1,#0]  ; _db_dec_32
;;;578    	_db_get_char = UARTGetChar;
000670  f2af6061          ADR      r0,UARTGetChar + 1
000674  4911              LDR      r1,|L1.1724|
000676  6008              STR      r0,[r1,#0]  ; _db_get_char
;;;579    	_db_get_val = UARTGetValue;
000678  f2af6011          ADR      r0,UARTGetValue + 1
00067c  4910              LDR      r1,|L1.1728|
00067e  6008              STR      r0,[r1,#0]  ; _db_get_val
;;;580    	_db_get_char_nonblocking = UARTGetCharInNonBlock;
000680  f2af6057          ADR      r0,UARTGetCharInNonBlock + 1
000684  490f              LDR      r1,|L1.1732|
000686  6008              STR      r0,[r1,#0]  ; _db_get_char_nonblocking
;;;581    }
000688  bd1c              POP      {r2-r4,pc}
;;;582    #endif /*_DBGFWK*/
                          ENDP

00068a  0000              DCW      0x0000
                  |L1.1676|
                          DCD      _db_msg
                  |L1.1680|
                          DCD      _db_msg_
                  |L1.1684|
                          DCD      _db_char
                  |L1.1688|
                          DCD      _db_hex
                  |L1.1692|
                          DCD      _db_hex_16
                  |L1.1696|
                          DCD      _db_hex_32
                  |L1.1700|
                          DCD      _db_hex_
                  |L1.1704|
                          DCD      _db_hex_16_
                  |L1.1708|
                          DCD      _db_hex_32_
                  |L1.1712|
                          DCD      _db_dec
                  |L1.1716|
                          DCD      _db_dec_16
                  |L1.1720|
                          DCD      _db_dec_32
                  |L1.1724|
                          DCD      _db_get_char
                  |L1.1728|
                          DCD      _db_get_val
                  |L1.1732|
                          DCD      _db_get_char_nonblocking

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  506c6561          DCB      0x50,0x6c,0x65,0x61
000004  73652065          DCB      0x73,0x65,0x20,0x65
000008  6e746572          DCB      0x6e,0x74,0x65,0x72
00000c  20612063          DCB      0x20,0x61,0x20,0x63
000010  68617220          DCB      0x68,0x61,0x72,0x20
000014  66726f6d          DCB      0x66,0x72,0x6f,0x6d
000018  20273027          DCB      0x20,0x27,0x30,0x27
00001c  20746f20          DCB      0x20,0x74,0x6f,0x20
000020  2739272c          DCB      0x27,0x39,0x27,0x2c
000024  20616e64          DCB      0x20,0x61,0x6e,0x64
000028  2027612f          DCB      0x20,0x27,0x61,0x2f
00002c  41272c20          DCB      0x41,0x27,0x2c,0x20
000030  27622f42          DCB      0x27,0x62,0x2f,0x42
000034  272c2063          DCB      0x27,0x2c,0x20,0x63
000038  2f43272c          DCB      0x2f,0x43,0x27,0x2c
00003c  2027642f          DCB      0x20,0x27,0x64,0x2f
000040  44272c20          DCB      0x44,0x27,0x2c,0x20
000044  27652f45          DCB      0x27,0x65,0x2f,0x45
000048  2720616e          DCB      0x27,0x20,0x61,0x6e
00004c  64202766          DCB      0x64,0x20,0x27,0x66
000050  2f462721          DCB      0x2f,0x46,0x27,0x21
000054  21210d0a          DCB      0x21,0x21,0x0d,0x0a
000058  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _db_msg
                          DCD      0x00000000
                  _db_msg_
                          DCD      0x00000000
                  _db_char
                          DCD      0x00000000
                  _db_dec
                          DCD      0x00000000
                  _db_dec_16
                          DCD      0x00000000
                  _db_dec_32
                          DCD      0x00000000
                  _db_hex
                          DCD      0x00000000
                  _db_hex_16
                          DCD      0x00000000
                  _db_hex_32
                          DCD      0x00000000
                  _db_hex_
                          DCD      0x00000000
                  _db_hex_16_
                          DCD      0x00000000
                  _db_hex_32_
                          DCD      0x00000000
                  _db_get_char
                          DCD      0x00000000
                  _db_get_char_nonblocking
                          DCD      0x00000000
                  _db_get_val
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\source\\debug_frmwrk.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_debug_frmwrk_c_e73e2caf____REV16|
#line 115 "..\\..\\..\\..\\Core\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_debug_frmwrk_c_e73e2caf____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_debug_frmwrk_c_e73e2caf____REVSH|
#line 129
|__asm___14_debug_frmwrk_c_e73e2caf____REVSH| PROC
#line 130

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
