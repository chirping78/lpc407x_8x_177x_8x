; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o".\FLASH M4\system_lpc407x_8x_177x_8x.o" --asm_dir=".\FLASH M4\\" --list_dir=".\FLASH M4\\" --depend=".\FLASH M4\system_lpc407x_8x_177x_8x.d" --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\..\Drivers\include -I..\..\..\..\BoardSupport -I..\..\..\..\Core\CMSIS\Include -I..\..\..\..\Core\Device\NXP\LPC407x_8x_177x_8x\Include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC407x_8x_177x_8x -D__MICROLIB -DCORE_M4 --omf_browse=".\FLASH M4\system_lpc407x_8x_177x_8x.crf" ..\..\..\..\Core\Device\NXP\LPC407x_8x_177x_8x\Source\Templates\system_LPC407x_8x_177x_8x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;377     *----------------------------------------------------------------------------*/
;;;378    void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  b530              PUSH     {r4,r5,lr}
;;;379    {
;;;380      /* Determine clock frequency according to clock register values             */
;;;381      if ((LPC_SC->CCLKSEL &0x100) == 0) {            /* cclk = sysclk    */
000002  48e7              LDR      r0,|L1.928|
000004  6800              LDR      r0,[r0,#0]
000006  f4107f80          TST      r0,#0x100
00000a  d16b              BNE      |L1.228|
;;;382        if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
00000c  48e5              LDR      r0,|L1.932|
00000e  6800              LDR      r0,[r0,#0]
000010  f0100f01          TST      r0,#1
000014  d12c              BNE      |L1.112|
;;;383    		  SystemCoreClock = __CLK_DIV(IRC_OSC , (LPC_SC->CCLKSEL & 0x1F));
000016  48e2              LDR      r0,|L1.928|
000018  6800              LDR      r0,[r0,#0]
00001a  f0100f1f          TST      r0,#0x1f
00001e  d101              BNE      |L1.36|
000020  2000              MOVS     r0,#0
000022  e006              B        |L1.50|
                  |L1.36|
000024  48de              LDR      r0,|L1.928|
000026  6800              LDR      r0,[r0,#0]
000028  f000001f          AND      r0,r0,#0x1f
00002c  49de              LDR      r1,|L1.936|
00002e  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.50|
000032  49de              LDR      r1,|L1.940|
000034  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;384              PeripheralClock = __CLK_DIV(IRC_OSC , (LPC_SC->PCLKSEL & 0x1F));
000036  48de              LDR      r0,|L1.944|
000038  6800              LDR      r0,[r0,#0]
00003a  f0100f1f          TST      r0,#0x1f
00003e  d101              BNE      |L1.68|
000040  2000              MOVS     r0,#0
000042  e006              B        |L1.82|
                  |L1.68|
000044  48da              LDR      r0,|L1.944|
000046  6800              LDR      r0,[r0,#0]
000048  f000001f          AND      r0,r0,#0x1f
00004c  49d6              LDR      r1,|L1.936|
00004e  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.82|
000052  49d8              LDR      r1,|L1.948|
000054  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;385              EMCClock        = (SystemCoreClock / ((LPC_SC->EMCCLKSEL & 0x01)+1));
000056  48d8              LDR      r0,|L1.952|
000058  6800              LDR      r0,[r0,#0]
00005a  f0000001          AND      r0,r0,#1
00005e  f1000001          ADD      r0,r0,#1
000062  49d2              LDR      r1,|L1.940|
000064  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000066  fbb1f0f0          UDIV     r0,r1,r0
00006a  49d4              LDR      r1,|L1.956|
00006c  6008              STR      r0,[r1,#0]  ; EMCClock
00006e  e0b6              B        |L1.478|
                  |L1.112|
;;;386        }
;;;387        else {                                        /* sysclk = osc_clk */
;;;388          if ((LPC_SC->SCS & 0x40) == 0) {
000070  48d3              LDR      r0,|L1.960|
000072  6800              LDR      r0,[r0,#0]
000074  f0100f40          TST      r0,#0x40
000078  d107              BNE      |L1.138|
;;;389              SystemCoreClock = 0;                      /* this should never happen! */
00007a  2000              MOVS     r0,#0
00007c  49cb              LDR      r1,|L1.940|
00007e  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;390              PeripheralClock = 0;
000080  49cc              LDR      r1,|L1.948|
000082  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;391              EMCClock        = 0;
000084  49cd              LDR      r1,|L1.956|
000086  6008              STR      r0,[r1,#0]  ; EMCClock
000088  e0a9              B        |L1.478|
                  |L1.138|
;;;392          }
;;;393          else {
;;;394              SystemCoreClock = __CLK_DIV(OSC_CLK , (LPC_SC->CCLKSEL & 0x1F));
00008a  48c5              LDR      r0,|L1.928|
00008c  6800              LDR      r0,[r0,#0]
00008e  f0100f1f          TST      r0,#0x1f
000092  d101              BNE      |L1.152|
000094  2000              MOVS     r0,#0
000096  e006              B        |L1.166|
                  |L1.152|
000098  48c1              LDR      r0,|L1.928|
00009a  6800              LDR      r0,[r0,#0]
00009c  f000001f          AND      r0,r0,#0x1f
0000a0  49c1              LDR      r1,|L1.936|
0000a2  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.166|
0000a6  49c1              LDR      r1,|L1.940|
0000a8  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;395              PeripheralClock = __CLK_DIV(OSC_CLK , (LPC_SC->PCLKSEL & 0x1F));
0000aa  48c1              LDR      r0,|L1.944|
0000ac  6800              LDR      r0,[r0,#0]
0000ae  f0100f1f          TST      r0,#0x1f
0000b2  d101              BNE      |L1.184|
0000b4  2000              MOVS     r0,#0
0000b6  e006              B        |L1.198|
                  |L1.184|
0000b8  48bd              LDR      r0,|L1.944|
0000ba  6800              LDR      r0,[r0,#0]
0000bc  f000001f          AND      r0,r0,#0x1f
0000c0  49b9              LDR      r1,|L1.936|
0000c2  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.198|
0000c6  49bb              LDR      r1,|L1.948|
0000c8  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;396              EMCClock        = (SystemCoreClock / ((LPC_SC->EMCCLKSEL & 0x01)+1));
0000ca  48bb              LDR      r0,|L1.952|
0000cc  6800              LDR      r0,[r0,#0]
0000ce  f0000001          AND      r0,r0,#1
0000d2  f1000001          ADD      r0,r0,#1
0000d6  49b5              LDR      r1,|L1.940|
0000d8  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
0000da  fbb1f0f0          UDIV     r0,r1,r0
0000de  49b7              LDR      r1,|L1.956|
0000e0  6008              STR      r0,[r1,#0]  ; EMCClock
0000e2  e07c              B        |L1.478|
                  |L1.228|
;;;397          }
;;;398        }
;;;399      }
;;;400      else {                                          /* cclk = pll_clk */
;;;401        if ((LPC_SC->PLL0STAT & 0x100) == 0) {        /* PLL0 not enabled */
0000e4  48b7              LDR      r0,|L1.964|
0000e6  6800              LDR      r0,[r0,#0]
0000e8  f4107f80          TST      r0,#0x100
0000ec  d107              BNE      |L1.254|
;;;402              SystemCoreClock = 0;                      /* this should never happen! */
0000ee  2000              MOVS     r0,#0
0000f0  49ae              LDR      r1,|L1.940|
0000f2  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;403              PeripheralClock = 0;
0000f4  49af              LDR      r1,|L1.948|
0000f6  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;404              EMCClock 		  = 0;
0000f8  49b0              LDR      r1,|L1.956|
0000fa  6008              STR      r0,[r1,#0]  ; EMCClock
0000fc  e06f              B        |L1.478|
                  |L1.254|
;;;405        }
;;;406        else {
;;;407          if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
0000fe  48a9              LDR      r0,|L1.932|
000100  6800              LDR      r0,[r0,#0]
000102  f0100f01          TST      r0,#1
000106  d12e              BNE      |L1.358|
;;;408              uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
000108  4cae              LDR      r4,|L1.964|
00010a  6824              LDR      r4,[r4,#0]
00010c  f004041f          AND      r4,r4,#0x1f
000110  f1040001          ADD      r0,r4,#1
;;;409              uint8_t cpu_div = (LPC_SC->CCLKSEL & 0x1F);
000114  4cac              LDR      r4,|L1.968|
000116  f8d44104          LDR      r4,[r4,#0x104]
00011a  f004011f          AND      r1,r4,#0x1f
;;;410              uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
00011e  4ca4              LDR      r4,|L1.944|
000120  6824              LDR      r4,[r4,#0]
000122  f004021f          AND      r2,r4,#0x1f
;;;411              uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
000126  4ca8              LDR      r4,|L1.968|
000128  f8d44100          LDR      r4,[r4,#0x100]
00012c  f0040401          AND      r4,r4,#1
000130  f1040301          ADD      r3,r4,#1
;;;412              SystemCoreClock = __CLK_DIV(IRC_OSC * mul , cpu_div);
000134  b909              CBNZ     r1,|L1.314|
000136  2400              MOVS     r4,#0
000138  e003              B        |L1.322|
                  |L1.314|
00013a  4c9b              LDR      r4,|L1.936|
00013c  4344              MULS     r4,r0,r4
00013e  fbb4f4f1          UDIV     r4,r4,r1
                  |L1.322|
000142  4d9a              LDR      r5,|L1.940|
000144  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;413              PeripheralClock = __CLK_DIV(IRC_OSC * mul , per_div);
000146  b90a              CBNZ     r2,|L1.332|
000148  2400              MOVS     r4,#0
00014a  e003              B        |L1.340|
                  |L1.332|
00014c  4c96              LDR      r4,|L1.936|
00014e  4344              MULS     r4,r0,r4
000150  fbb4f4f2          UDIV     r4,r4,r2
                  |L1.340|
000154  4d97              LDR      r5,|L1.948|
000156  602c              STR      r4,[r5,#0]  ; PeripheralClock
;;;414              EMCClock        = SystemCoreClock / emc_div;
000158  4c94              LDR      r4,|L1.940|
00015a  6824              LDR      r4,[r4,#0]  ; SystemCoreClock
00015c  fbb4f4f3          UDIV     r4,r4,r3
000160  4d96              LDR      r5,|L1.956|
000162  602c              STR      r4,[r5,#0]  ; EMCClock
;;;415          }
000164  e03b              B        |L1.478|
                  |L1.358|
;;;416          else {                                        /* sysclk = osc_clk */
;;;417            if ((LPC_SC->SCS & 0x40) == 0) {
000166  4896              LDR      r0,|L1.960|
000168  6800              LDR      r0,[r0,#0]
00016a  f0100f40          TST      r0,#0x40
00016e  d107              BNE      |L1.384|
;;;418              SystemCoreClock = 0;                      /* this should never happen! */
000170  2000              MOVS     r0,#0
000172  498e              LDR      r1,|L1.940|
000174  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;419              PeripheralClock = 0;
000176  498f              LDR      r1,|L1.948|
000178  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;420              EMCClock 		  = 0;
00017a  4990              LDR      r1,|L1.956|
00017c  6008              STR      r0,[r1,#0]  ; EMCClock
00017e  e02e              B        |L1.478|
                  |L1.384|
;;;421            }
;;;422            else {
;;;423              uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
000180  4c90              LDR      r4,|L1.964|
000182  6824              LDR      r4,[r4,#0]
000184  f004041f          AND      r4,r4,#0x1f
000188  f1040001          ADD      r0,r4,#1
;;;424              uint8_t cpu_div = (LPC_SC->CCLKSEL & 0x1F);
00018c  4c8e              LDR      r4,|L1.968|
00018e  f8d44104          LDR      r4,[r4,#0x104]
000192  f004011f          AND      r1,r4,#0x1f
;;;425              uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
000196  4c86              LDR      r4,|L1.944|
000198  6824              LDR      r4,[r4,#0]
00019a  f004021f          AND      r2,r4,#0x1f
;;;426    		  uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
00019e  4c8a              LDR      r4,|L1.968|
0001a0  f8d44100          LDR      r4,[r4,#0x100]
0001a4  f0040401          AND      r4,r4,#1
0001a8  f1040301          ADD      r3,r4,#1
;;;427              SystemCoreClock = __CLK_DIV(OSC_CLK * mul , cpu_div);
0001ac  b909              CBNZ     r1,|L1.434|
0001ae  2400              MOVS     r4,#0
0001b0  e003              B        |L1.442|
                  |L1.434|
0001b2  4c7d              LDR      r4,|L1.936|
0001b4  4344              MULS     r4,r0,r4
0001b6  fbb4f4f1          UDIV     r4,r4,r1
                  |L1.442|
0001ba  4d7c              LDR      r5,|L1.940|
0001bc  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;428              PeripheralClock = __CLK_DIV(OSC_CLK * mul , per_div);
0001be  b90a              CBNZ     r2,|L1.452|
0001c0  2400              MOVS     r4,#0
0001c2  e003              B        |L1.460|
                  |L1.452|
0001c4  4c78              LDR      r4,|L1.936|
0001c6  4344              MULS     r4,r0,r4
0001c8  fbb4f4f2          UDIV     r4,r4,r2
                  |L1.460|
0001cc  4d79              LDR      r5,|L1.948|
0001ce  602c              STR      r4,[r5,#0]  ; PeripheralClock
;;;429              EMCClock        = SystemCoreClock / emc_div;
0001d0  4c76              LDR      r4,|L1.940|
0001d2  6824              LDR      r4,[r4,#0]  ; SystemCoreClock
0001d4  fbb4f4f3          UDIV     r4,r4,r3
0001d8  4d78              LDR      r5,|L1.956|
0001da  602c              STR      r4,[r5,#0]  ; EMCClock
;;;430            }
0001dc  bf00              NOP      
                  |L1.478|
;;;431          }
;;;432        }
;;;433      }
;;;434      /* ---update USBClock------------------*/
;;;435      if(LPC_SC->USBCLKSEL & (0x01<<8))//Use PLL0 as the input to the USB clock divider
0001de  487b              LDR      r0,|L1.972|
0001e0  6800              LDR      r0,[r0,#0]
0001e2  f4107f80          TST      r0,#0x100
0001e6  d031              BEQ      |L1.588|
;;;436      {
;;;437    	  switch (LPC_SC->USBCLKSEL & 0x1F)
0001e8  4878              LDR      r0,|L1.972|
0001ea  6800              LDR      r0,[r0,#0]
0001ec  f010001f          ANDS     r0,r0,#0x1f
0001f0  d004              BEQ      |L1.508|
0001f2  2804              CMP      r0,#4
0001f4  d006              BEQ      |L1.516|
0001f6  2806              CMP      r0,#6
0001f8  d123              BNE      |L1.578|
0001fa  e004              B        |L1.518|
                  |L1.508|
;;;438    	  {
;;;439    	  case 0:
;;;440    		  USBClock = 0; //no clock will be provided to the USB subsystem
0001fc  2000              MOVS     r0,#0
0001fe  4974              LDR      r1,|L1.976|
000200  6008              STR      r0,[r1,#0]  ; USBClock
;;;441    		  break;
000202  e022              B        |L1.586|
                  |L1.516|
;;;442    	  case 4:
;;;443    	  case 6:
000204  bf00              NOP      
                  |L1.518|
;;;444                {
;;;445                     uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
000206  4a6f              LDR      r2,|L1.964|
000208  6812              LDR      r2,[r2,#0]
00020a  f002021f          AND      r2,r2,#0x1f
00020e  f1020001          ADD      r0,r2,#1
;;;446                     uint8_t usb_div = (LPC_SC->USBCLKSEL & 0x1F);
000212  4a6d              LDR      r2,|L1.968|
000214  f8d22108          LDR      r2,[r2,#0x108]
000218  f002011f          AND      r1,r2,#0x1f
;;;447    		  if(LPC_SC->CLKSRCSEL & 0x01)	//pll_clk_in = main_osc
00021c  4a61              LDR      r2,|L1.932|
00021e  6812              LDR      r2,[r2,#0]
000220  f0120f01          TST      r2,#1
000224  d006              BEQ      |L1.564|
;;;448    			  USBClock = OSC_CLK * mul / usb_div;
000226  4a60              LDR      r2,|L1.936|
000228  4342              MULS     r2,r0,r2
00022a  fbb2f2f1          UDIV     r2,r2,r1
00022e  4b68              LDR      r3,|L1.976|
000230  601a              STR      r2,[r3,#0]  ; USBClock
000232  e005              B        |L1.576|
                  |L1.564|
;;;449    		  else //pll_clk_in = irc_clk
;;;450    			  USBClock = IRC_OSC * mul / usb_div;
000234  4a5c              LDR      r2,|L1.936|
000236  4342              MULS     r2,r0,r2
000238  fbb2f2f1          UDIV     r2,r2,r1
00023c  4b64              LDR      r3,|L1.976|
00023e  601a              STR      r2,[r3,#0]  ; USBClock
                  |L1.576|
;;;451                }
;;;452                break;
000240  e003              B        |L1.586|
                  |L1.578|
;;;453    	  default:
;;;454    		  USBClock = 0;  /* this should never happen! */
000242  2000              MOVS     r0,#0
000244  4962              LDR      r1,|L1.976|
000246  6008              STR      r0,[r1,#0]  ; USBClock
000248  bf00              NOP                            ;437
                  |L1.586|
00024a  e024              B        |L1.662|
                  |L1.588|
;;;455    	  }
;;;456      }
;;;457      else if(LPC_SC->USBCLKSEL & (0x02<<8))//usb_input_clk = alt_pll (pll1)
00024c  485f              LDR      r0,|L1.972|
00024e  6800              LDR      r0,[r0,#0]
000250  f4107f00          TST      r0,#0x200
000254  d01c              BEQ      |L1.656|
;;;458      {
;;;459    	  if(LPC_SC->CLKSRCSEL & 0x01)	//pll1_clk_in = main_osc
000256  4853              LDR      r0,|L1.932|
000258  6800              LDR      r0,[r0,#0]
00025a  f0100f01          TST      r0,#1
00025e  d00b              BEQ      |L1.632|
;;;460    	  		USBClock = (OSC_CLK * ((LPC_SC->PLL1STAT & 0x1F) + 1));
000260  485c              LDR      r0,|L1.980|
000262  6800              LDR      r0,[r0,#0]
000264  f000001f          AND      r0,r0,#0x1f
000268  f1000001          ADD      r0,r0,#1
00026c  494e              LDR      r1,|L1.936|
00026e  fb00f001          MUL      r0,r0,r1
000272  4957              LDR      r1,|L1.976|
000274  6008              STR      r0,[r1,#0]  ; USBClock
000276  e00e              B        |L1.662|
                  |L1.632|
;;;461    	  else //pll1_clk_in = irc_clk
;;;462    	  		USBClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1));
000278  4852              LDR      r0,|L1.964|
00027a  6800              LDR      r0,[r0,#0]
00027c  f000001f          AND      r0,r0,#0x1f
000280  f1000001          ADD      r0,r0,#1
000284  4948              LDR      r1,|L1.936|
000286  fb00f001          MUL      r0,r0,r1
00028a  4951              LDR      r1,|L1.976|
00028c  6008              STR      r0,[r1,#0]  ; USBClock
00028e  e002              B        |L1.662|
                  |L1.656|
;;;463      }
;;;464      else
;;;465    	  USBClock = 0; /* this should never happen! */
000290  2000              MOVS     r0,#0
000292  494f              LDR      r1,|L1.976|
000294  6008              STR      r0,[r1,#0]  ; USBClock
                  |L1.662|
;;;466    }
000296  bd30              POP      {r4,r5,pc}
;;;467    
                          ENDP

                  fpu_init PROC
;;;471    
;;;472    void fpu_init(void)
000298  b570              PUSH     {r4-r6,lr}
;;;473    {
;;;474     // from arm trm manual:
;;;475    //                ; CPACR is located at address 0xE000ED88
;;;476    //                LDR.W R0, =0xE000ED88
;;;477    //                ; Read CPACR
;;;478    //                LDR R1, [R0]
;;;479    //                ; Set bits 20-23 to enable CP10 and CP11 coprocessors
;;;480    //                ORR R1, R1, #(0xF << 20)
;;;481    //                ; Write back the modified value to the CPACR
;;;482    //                STR R1, [R0]
;;;483    
;;;484    
;;;485        volatile uint32_t* regCpacr = (uint32_t*) LPC_CPACR;
00029a  484f              LDR      r0,|L1.984|
;;;486        volatile uint32_t* regMvfr0 = (uint32_t*) SCB_MVFR0;
00029c  4a4f              LDR      r2,|L1.988|
;;;487        volatile uint32_t* regMvfr1 = (uint32_t*) SCB_MVFR1;
00029e  1d13              ADDS     r3,r2,#4
;;;488        volatile uint32_t Cpacr;
;;;489        volatile uint32_t Mvfr0;
;;;490        volatile uint32_t Mvfr1;
;;;491        char vfpPresent = 0;
0002a0  f04f0c00          MOV      r12,#0
;;;492    
;;;493        Mvfr0 = *regMvfr0;
0002a4  6814              LDR      r4,[r2,#0]
;;;494        Mvfr1 = *regMvfr1;
0002a6  681d              LDR      r5,[r3,#0]
;;;495    
;;;496        vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
0002a8  4e4d              LDR      r6,|L1.992|
0002aa  42b4              CMP      r4,r6
0002ac  d105              BNE      |L1.698|
0002ae  f1a55688          SUB      r6,r5,#0x11000000
0002b2  3e11              SUBS     r6,r6,#0x11
0002b4  d101              BNE      |L1.698|
0002b6  2601              MOVS     r6,#1
0002b8  e000              B        |L1.700|
                  |L1.698|
0002ba  2600              MOVS     r6,#0
                  |L1.700|
0002bc  46b4              MOV      r12,r6
;;;497    
;;;498        if(vfpPresent)
0002be  f1bc0f00          CMP      r12,#0
0002c2  d003              BEQ      |L1.716|
;;;499        {
;;;500            Cpacr = *regCpacr;
0002c4  6801              LDR      r1,[r0,#0]
;;;501            Cpacr |= (0xF << 20);
0002c6  f4410170          ORR      r1,r1,#0xf00000
;;;502            *regCpacr = Cpacr;   // enable CP10 and CP11 for full access
0002ca  6001              STR      r1,[r0,#0]
                  |L1.716|
;;;503        }
;;;504    
;;;505    }
0002cc  bd70              POP      {r4-r6,pc}
;;;506    #endif
                          ENDP

                  SystemInit PROC
;;;516     */
;;;517    void SystemInit (void)
0002ce  b500              PUSH     {lr}
;;;518    {
;;;519    #ifndef __CODE_RED
;;;520    #ifdef CORE_M4
;;;521    fpu_init();
0002d0  f7fffffe          BL       fpu_init
;;;522    #endif
;;;523    #endif
;;;524    
;;;525    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;526      LPC_SC->SCS       = SCS_Val;
0002d4  2020              MOVS     r0,#0x20
0002d6  493a              LDR      r1,|L1.960|
0002d8  6008              STR      r0,[r1,#0]
;;;527      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;528        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
0002da  bf00              NOP      
                  |L1.732|
0002dc  4838              LDR      r0,|L1.960|
0002de  6800              LDR      r0,[r0,#0]
0002e0  f0100f40          TST      r0,#0x40
0002e4  d0fa              BEQ      |L1.732|
;;;529      }
;;;530    
;;;531      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for sysclk/PLL0*/
0002e6  2001              MOVS     r0,#1
0002e8  492e              LDR      r1,|L1.932|
0002ea  6008              STR      r0,[r1,#0]
;;;532    
;;;533    #if (PLL0_SETUP)
;;;534      LPC_SC->PLL0CFG   = PLL0CFG_Val;
0002ec  f04f0009          MOV      r0,#9
0002f0  4935              LDR      r1,|L1.968|
0002f2  f8c10084          STR      r0,[r1,#0x84]
;;;535      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
0002f6  f04f0001          MOV      r0,#1
0002fa  493a              LDR      r1,|L1.996|
0002fc  6008              STR      r0,[r1,#0]
;;;536      LPC_SC->PLL0FEED  = 0xAA;
0002fe  f04f00aa          MOV      r0,#0xaa
000302  4939              LDR      r1,|L1.1000|
000304  6008              STR      r0,[r1,#0]
;;;537      LPC_SC->PLL0FEED  = 0x55;
000306  f04f0055          MOV      r0,#0x55
00030a  6008              STR      r0,[r1,#0]
;;;538      while (!(LPC_SC->PLL0STAT & (1<<10)));/* Wait for PLOCK0                    */
00030c  bf00              NOP      
                  |L1.782|
00030e  482d              LDR      r0,|L1.964|
000310  6800              LDR      r0,[r0,#0]
000312  f4106f80          TST      r0,#0x400
000316  d0fa              BEQ      |L1.782|
;;;539    #endif
;;;540    
;;;541    #if (PLL1_SETUP)
;;;542      LPC_SC->PLL1CFG   = PLL1CFG_Val;
000318  2023              MOVS     r0,#0x23
00031a  4934              LDR      r1,|L1.1004|
00031c  6008              STR      r0,[r1,#0]
;;;543      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
00031e  f04f0001          MOV      r0,#1
000322  4929              LDR      r1,|L1.968|
000324  f8c100a0          STR      r0,[r1,#0xa0]
;;;544      LPC_SC->PLL1FEED  = 0xAA;
000328  f04f00aa          MOV      r0,#0xaa
00032c  4930              LDR      r1,|L1.1008|
00032e  6008              STR      r0,[r1,#0]
;;;545      LPC_SC->PLL1FEED  = 0x55;
000330  f04f0055          MOV      r0,#0x55
000334  4924              LDR      r1,|L1.968|
000336  f8c100ac          STR      r0,[r1,#0xac]
;;;546      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
00033a  bf00              NOP      
                  |L1.828|
00033c  4825              LDR      r0,|L1.980|
00033e  6800              LDR      r0,[r0,#0]
000340  f4106f80          TST      r0,#0x400
000344  d0fa              BEQ      |L1.828|
;;;547    #endif
;;;548    
;;;549      LPC_SC->CCLKSEL   = CCLKSEL_Val;      /* Setup Clock Divider                */
000346  f2401001          MOV      r0,#0x101
00034a  4915              LDR      r1,|L1.928|
00034c  6008              STR      r0,[r1,#0]
;;;550      LPC_SC->USBCLKSEL = USBCLKSEL_Val;    /* Setup USB Clock Divider            */
00034e  f2402001          MOV      r0,#0x201
000352  491d              LDR      r1,|L1.968|
000354  f8c10108          STR      r0,[r1,#0x108]
;;;551      LPC_SC->EMCCLKSEL = EMCCLKSEL_Val;    /* EMC Clock Selection                */
000358  f04f0001          MOV      r0,#1
00035c  4916              LDR      r1,|L1.952|
00035e  6008              STR      r0,[r1,#0]
;;;552      LPC_SC->SPIFICLKSEL  = SPIFICLKSEL_Val;  /* SPIFI Clock Selection              */
000360  f04f0002          MOV      r0,#2
000364  4923              LDR      r1,|L1.1012|
000366  6008              STR      r0,[r1,#0]
;;;553      LPC_SC->PCLKSEL   = PCLKSEL_Val;      /* Peripheral Clock Selection         */
000368  4911              LDR      r1,|L1.944|
00036a  6008              STR      r0,[r1,#0]
;;;554      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
00036c  4822              LDR      r0,|L1.1016|
00036e  4923              LDR      r1,|L1.1020|
000370  6008              STR      r0,[r1,#0]
;;;555      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000372  f44f7080          MOV      r0,#0x100
000376  4914              LDR      r1,|L1.968|
000378  f8c101c8          STR      r0,[r1,#0x1c8]
;;;556    #endif
;;;557    
;;;558      LPC_SC->PBOOST 	|= 0x03;			/* Power Boost control				*/
00037c  4608              MOV      r0,r1
00037e  f8d001b0          LDR      r0,[r0,#0x1b0]
000382  f0400003          ORR      r0,r0,#3
000386  491e              LDR      r1,|L1.1024|
000388  6008              STR      r0,[r1,#0]
;;;559    
;;;560    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;561      LPC_SC->FLASHCFG  = FLASHCFG_Val|0x03A;
00038a  f245003a          MOV      r0,#0x503a
00038e  490e              LDR      r1,|L1.968|
000390  6008              STR      r0,[r1,#0]
;;;562    #endif
;;;563    #ifndef __CODE_RED
;;;564    #ifdef  __RAM_MODE__
;;;565      SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
;;;566    #else
;;;567      SCB->VTOR  = 0x00000000 & 0x3FFFFF80;
000392  f04f0000          MOV      r0,#0
000396  491b              LDR      r1,|L1.1028|
000398  6008              STR      r0,[r1,#0]
;;;568    #endif
;;;569    #endif
;;;570      SystemCoreClockUpdate();
00039a  f7fffffe          BL       SystemCoreClockUpdate
;;;571    }
00039e  bd00              POP      {pc}
                          ENDP

                  |L1.928|
                          DCD      0x400fc104
                  |L1.932|
                          DCD      0x400fc10c
                  |L1.936|
                          DCD      0x00b71b00
                  |L1.940|
                          DCD      SystemCoreClock
                  |L1.944|
                          DCD      0x400fc1a8
                  |L1.948|
                          DCD      PeripheralClock
                  |L1.952|
                          DCD      0x400fc100
                  |L1.956|
                          DCD      EMCClock
                  |L1.960|
                          DCD      0x400fc1a0
                  |L1.964|
                          DCD      0x400fc088
                  |L1.968|
                          DCD      0x400fc000
                  |L1.972|
                          DCD      0x400fc108
                  |L1.976|
                          DCD      USBClock
                  |L1.980|
                          DCD      0x400fc0a8
                  |L1.984|
                          DCD      0xe000ed88
                  |L1.988|
                          DCD      0xe000ef40
                  |L1.992|
                          DCD      0x10110021
                  |L1.996|
                          DCD      0x400fc080
                  |L1.1000|
                          DCD      0x400fc08c
                  |L1.1004|
                          DCD      0x400fc0a4
                  |L1.1008|
                          DCD      0x400fc0ac
                  |L1.1012|
                          DCD      0x400fc1b4
                  |L1.1016|
                          DCD      0x042887de
                  |L1.1020|
                          DCD      0x400fc0c4
                  |L1.1024|
                          DCD      0x400fc1b0
                  |L1.1028|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x07270e00
                  PeripheralClock
                          DCD      0x03938700
                  EMCClock
                          DCD      0x03938700
                  USBClock
                          DCD      0x02dc6c00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Core\\Device\\NXP\\LPC407x_8x_177x_8x\\Source\\Templates\\system_LPC407x_8x_177x_8x.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REV16|
#line 115 "..\\..\\..\\..\\Core\\CMSIS\\Include\\core_cmInstr.h"
|__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REVSH|
#line 129
|__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REVSH| PROC
#line 130

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
